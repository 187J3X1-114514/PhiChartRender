{"version":3,"file":"o.O-CzVoOIqF.js","sources":["../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/app/ResizePlugin.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/app/TickerPlugin.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/filters/FilterPipe.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/container/bounds/getFastGlobalBounds.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/container/bounds/getRenderableBounds.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/filters/FilterSystem.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/mesh/shared/MeshGeometry.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text-html/utils/textStyleToCSS.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text-html/HtmlTextStyle.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text-html/HTMLTextRenderData.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text-html/utils/measureHtmlText.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/graphics/shared/GraphicsPipe.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/mesh-plane/PlaneGeometry.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/mesh/shared/BatchableMesh.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/mesh/shared/MeshPipe.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceGeometry.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceSpritePipe.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/sprite-tiling/shader/tilingBit.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/sprite-tiling/shader/TilingSpriteShader.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/sprite-tiling/utils/QuadGeometry.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/sprite-tiling/utils/setPositions.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/sprite-tiling/utils/applyMatrix.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/sprite-tiling/utils/setUvs.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/sprite-tiling/TilingSpritePipe.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/localUniformMSDFBit.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/mSDFBit.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text/sdfShader/SdfShader.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text-bitmap/BitmapTextPipe.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text-html/HTMLTextPipe.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/utils/browser/isSafari.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text/utils/getPo2TextureFromSource.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text-html/utils/extractFontFamilies.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text-html/utils/loadFontAsBase64.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text-html/utils/loadFontCSS.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text-html/utils/getFontCss.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text-html/utils/getSVGUrl.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text-html/utils/getTemporaryCanvasFromImage.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text-html/utils/loadSVGImage.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text-html/HTMLTextSystem.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text/canvas/CanvasTextPipe.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/utils/canvas/getCanvasBoundingBox.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text/canvas/CanvasTextSystem.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/app/init.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/graphics/init.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/mesh/init.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text/init.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text-bitmap/init.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/text-html/init.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/sprite-tiling/init.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/sprite-nine-slice/init.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/filters/init.mjs"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ResizePlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    Object.defineProperty(\n      this,\n      \"resizeTo\",\n      /**\n       * The HTML element or window to automatically resize the\n       * renderer's view element to match width and height.\n       * @member {Window|HTMLElement}\n       * @name resizeTo\n       * @memberof app.Application#\n       */\n      {\n        set(dom) {\n          globalThis.removeEventListener(\"resize\", this.queueResize);\n          this._resizeTo = dom;\n          if (dom) {\n            globalThis.addEventListener(\"resize\", this.queueResize);\n            this.resize();\n          }\n        },\n        get() {\n          return this._resizeTo;\n        }\n      }\n    );\n    this.queueResize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      this._resizeId = requestAnimationFrame(() => this.resize());\n    };\n    this._cancelResize = () => {\n      if (this._resizeId) {\n        cancelAnimationFrame(this._resizeId);\n        this._resizeId = null;\n      }\n    };\n    this.resize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      let width;\n      let height;\n      if (this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      } else {\n        const { clientWidth, clientHeight } = this._resizeTo;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      this.renderer.resize(width, height);\n      this.render();\n    };\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  }\n  /**\n   * Clean up the ticker, scoped to application\n   * @static\n   * @private\n   */\n  static destroy() {\n    globalThis.removeEventListener(\"resize\", this.queueResize);\n    this._cancelResize();\n    this._cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  }\n}\n/** @ignore */\nResizePlugin.extension = ExtensionType.Application;\n\nexport { ResizePlugin };\n//# sourceMappingURL=ResizePlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { UPDATE_PRIORITY } from '../ticker/const.mjs';\nimport { Ticker } from '../ticker/Ticker.mjs';\n\n\"use strict\";\nclass TickerPlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    options = Object.assign({\n      autoStart: true,\n      sharedTicker: false\n    }, options);\n    Object.defineProperty(\n      this,\n      \"ticker\",\n      {\n        set(ticker) {\n          if (this._ticker) {\n            this._ticker.remove(this.render, this);\n          }\n          this._ticker = ticker;\n          if (ticker) {\n            ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n          }\n        },\n        get() {\n          return this._ticker;\n        }\n      }\n    );\n    this.stop = () => {\n      this._ticker.stop();\n    };\n    this.start = () => {\n      this._ticker.start();\n    };\n    this._ticker = null;\n    this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n    if (options.autoStart) {\n      this.start();\n    }\n  }\n  /**\n   * Clean up the ticker, scoped to application.\n   * @static\n   * @private\n   */\n  static destroy() {\n    if (this._ticker) {\n      const oldTicker = this._ticker;\n      this.ticker = null;\n      oldTicker.destroy();\n    }\n  }\n}\n/** @ignore */\nTickerPlugin.extension = ExtensionType.Application;\n\nexport { TickerPlugin };\n//# sourceMappingURL=TickerPlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass FilterPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  push(filterEffect, container, instructionSet) {\n    const renderPipes = this._renderer.renderPipes;\n    renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      canBundle: false,\n      action: \"pushFilter\",\n      container,\n      filterEffect\n    });\n  }\n  pop(_filterEffect, _container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    if (instruction.action === \"pushFilter\") {\n      this._renderer.filter.push(instruction);\n    } else if (instruction.action === \"popFilter\") {\n      this._renderer.filter.pop();\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nFilterPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"filter\"\n};\n\nexport { FilterPipe };\n//# sourceMappingURL=FilterPipe.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { boundsPool } from './utils/matrixAndBoundsPool.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nfunction getFastGlobalBounds(target, bounds) {\n  bounds.clear();\n  _getGlobalBoundsRecursive(target, bounds);\n  if (!bounds.isValid) {\n    bounds.set(0, 0, 0, 0);\n  }\n  if (!target.renderGroup) {\n    bounds.applyMatrix(target.parentRenderGroup.worldTransform);\n  } else {\n    bounds.applyMatrix(target.renderGroup.localTransform);\n  }\n  return bounds;\n}\nfunction _getGlobalBoundsRecursive(target, bounds) {\n  if (target.localDisplayStatus !== 7 || !target.measurable) {\n    return;\n  }\n  const manageEffects = !!target.effects.length;\n  let localBounds = bounds;\n  if (target.renderGroup || manageEffects) {\n    localBounds = boundsPool.get().clear();\n  }\n  if (target.boundsArea) {\n    bounds.addRect(target.boundsArea, target.worldTransform);\n  } else {\n    if (target.renderPipeId) {\n      const viewBounds = target.bounds;\n      localBounds.addFrame(\n        viewBounds.minX,\n        viewBounds.minY,\n        viewBounds.maxX,\n        viewBounds.maxY,\n        target.groupTransform\n      );\n    }\n    const children = target.children;\n    for (let i = 0; i < children.length; i++) {\n      _getGlobalBoundsRecursive(children[i], localBounds);\n    }\n  }\n  if (manageEffects) {\n    let advanced = false;\n    for (let i = 0; i < target.effects.length; i++) {\n      if (target.effects[i].addBounds) {\n        if (!advanced) {\n          advanced = true;\n          localBounds.applyMatrix(target.parentRenderGroup.worldTransform);\n        }\n        target.effects[i].addBounds(localBounds, true);\n      }\n    }\n    if (advanced) {\n      localBounds.applyMatrix(target.parentRenderGroup.worldTransform.copyTo(tempMatrix).invert());\n      bounds.addBounds(localBounds, target.relativeGroupTransform);\n    }\n    bounds.addBounds(localBounds);\n    boundsPool.return(localBounds);\n  } else if (target.renderGroup) {\n    bounds.addBounds(localBounds, target.relativeGroupTransform);\n    boundsPool.return(localBounds);\n  }\n}\n\nexport { _getGlobalBoundsRecursive, getFastGlobalBounds };\n//# sourceMappingURL=getFastGlobalBounds.mjs.map\n","\"use strict\";\nfunction getGlobalRenderableBounds(renderables, bounds) {\n  bounds.clear();\n  const tempMatrix = bounds.matrix;\n  for (let i = 0; i < renderables.length; i++) {\n    const renderable = renderables[i];\n    if (renderable.globalDisplayStatus < 7) {\n      continue;\n    }\n    bounds.matrix = renderable.worldTransform;\n    renderable.addBounds(bounds);\n  }\n  bounds.matrix = tempMatrix;\n  return bounds;\n}\n\nexport { getGlobalRenderableBounds };\n//# sourceMappingURL=getRenderableBounds.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { Matrix } from '../maths/matrix/Matrix.mjs';\nimport { Point } from '../maths/point/Point.mjs';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../rendering/renderers/types.mjs';\nimport { Bounds } from '../scene/container/bounds/Bounds.mjs';\nimport { getFastGlobalBounds } from '../scene/container/bounds/getFastGlobalBounds.mjs';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds.mjs';\nimport { warn } from '../utils/logging/warn.mjs';\n\n\"use strict\";\nconst quadGeometry = new Geometry({\n  attributes: {\n    aPosition: {\n      buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      location: 0,\n      format: \"float32x2\",\n      stride: 2 * 4,\n      offset: 0\n    }\n  },\n  indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3])\n});\nclass FilterSystem {\n  constructor(renderer) {\n    this._filterStackIndex = 0;\n    this._filterStack = [];\n    this._filterGlobalUniforms = new UniformGroup({\n      uInputSize: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputPixel: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputClamp: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uGlobalFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputTexture: { value: new Float32Array(4), type: \"vec4<f32>\" }\n    });\n    this._globalFilterBindGroup = new BindGroup({});\n    this.renderer = renderer;\n  }\n  /**\n   * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n   * @readonly\n   */\n  get activeBackTexture() {\n    return this._activeFilterData?.backTexture;\n  }\n  push(instruction) {\n    const renderer = this.renderer;\n    const filters = instruction.filterEffect.filters;\n    if (!this._filterStack[this._filterStackIndex]) {\n      this._filterStack[this._filterStackIndex] = this._getFilterData();\n    }\n    const filterData = this._filterStack[this._filterStackIndex];\n    this._filterStackIndex++;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return;\n    }\n    const bounds = filterData.bounds;\n    if (instruction.renderables) {\n      getGlobalRenderableBounds(instruction.renderables, bounds);\n    } else if (instruction.filterEffect.filterArea) {\n      bounds.clear();\n      bounds.addRect(instruction.filterEffect.filterArea);\n      bounds.applyMatrix(instruction.container.worldTransform);\n    } else {\n      getFastGlobalBounds(instruction.container, bounds);\n    }\n    const colorTextureSource = renderer.renderTarget.rootRenderTarget.colorTexture.source;\n    let resolution = colorTextureSource._resolution;\n    let padding = 0;\n    let antialias = colorTextureSource.antialias;\n    let blendRequired = false;\n    let enabled = false;\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n      resolution = Math.min(resolution, filter.resolution);\n      padding += filter.padding;\n      if (filter.antialias !== \"inherit\") {\n        if (filter.antialias === \"on\") {\n          antialias = true;\n        } else {\n          antialias = false;\n        }\n      }\n      const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n      if (!isCompatible) {\n        enabled = false;\n        break;\n      }\n      if (filter.blendRequired && !(renderer.backBuffer?.useBackBuffer ?? true)) {\n        warn(\"Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.\");\n        enabled = false;\n        break;\n      }\n      enabled = filter.enabled || enabled;\n      blendRequired = blendRequired || filter.blendRequired;\n    }\n    if (!enabled) {\n      filterData.skip = true;\n      return;\n    }\n    const viewPort = renderer.renderTarget.rootViewPort;\n    bounds.scale(resolution).fitBounds(0, viewPort.width, 0, viewPort.height).scale(1 / resolution).pad(padding).ceil();\n    if (!bounds.isPositive) {\n      filterData.skip = true;\n      return;\n    }\n    filterData.skip = false;\n    filterData.bounds = bounds;\n    filterData.blendRequired = blendRequired;\n    filterData.container = instruction.container;\n    filterData.filterEffect = instruction.filterEffect;\n    filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n    filterData.inputTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      resolution,\n      antialias\n    );\n    renderer.renderTarget.bind(filterData.inputTexture, true);\n    renderer.globalUniforms.push({\n      offset: bounds\n    });\n  }\n  pop() {\n    const renderer = this.renderer;\n    this._filterStackIndex--;\n    const filterData = this._filterStack[this._filterStackIndex];\n    if (filterData.skip) {\n      return;\n    }\n    this._activeFilterData = filterData;\n    const inputTexture = filterData.inputTexture;\n    const bounds = filterData.bounds;\n    let backTexture = Texture.EMPTY;\n    renderer.renderTarget.finishRenderPass();\n    if (filterData.blendRequired) {\n      const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n      const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n      backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n    }\n    filterData.backTexture = backTexture;\n    const filters = filterData.filterEffect.filters;\n    this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n    this._globalFilterBindGroup.setResource(backTexture.source, 3);\n    renderer.globalUniforms.pop();\n    if (filters.length === 1) {\n      filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(inputTexture);\n    } else {\n      let flip = filterData.inputTexture;\n      let flop = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        flip.source._resolution,\n        false\n      );\n      let i = 0;\n      for (i = 0; i < filters.length - 1; ++i) {\n        const filter = filters[i];\n        filter.apply(this, flip, flop, true);\n        const t = flip;\n        flip = flop;\n        flop = t;\n      }\n      filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(flip);\n      TexturePool.returnTexture(flop);\n    }\n    if (filterData.blendRequired) {\n      TexturePool.returnTexture(backTexture);\n    }\n  }\n  getBackTexture(lastRenderSurface, bounds, previousBounds) {\n    const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n    const backTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      backgroundResolution,\n      false\n    );\n    let x = bounds.minX;\n    let y = bounds.minY;\n    if (previousBounds) {\n      x -= previousBounds.minX;\n      y -= previousBounds.minY;\n    }\n    x = Math.floor(x * backgroundResolution);\n    y = Math.floor(y * backgroundResolution);\n    const width = Math.ceil(bounds.width * backgroundResolution);\n    const height = Math.ceil(bounds.height * backgroundResolution);\n    this.renderer.renderTarget.copyToTexture(\n      lastRenderSurface,\n      backTexture,\n      { x, y },\n      { width, height },\n      { x: 0, y: 0 }\n    );\n    return backTexture;\n  }\n  applyFilter(filter, input, output, clear) {\n    const renderer = this.renderer;\n    const filterData = this._filterStack[this._filterStackIndex];\n    const bounds = filterData.bounds;\n    const offset = Point.shared;\n    const previousRenderSurface = filterData.previousRenderSurface;\n    const isFinalTarget = previousRenderSurface === output;\n    let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n    let currentIndex = this._filterStackIndex - 1;\n    while (currentIndex > 0 && this._filterStack[currentIndex].skip) {\n      --currentIndex;\n    }\n    if (currentIndex > 0) {\n      resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n    }\n    const filterUniforms = this._filterGlobalUniforms;\n    const uniforms = filterUniforms.uniforms;\n    const outputFrame = uniforms.uOutputFrame;\n    const inputSize = uniforms.uInputSize;\n    const inputPixel = uniforms.uInputPixel;\n    const inputClamp = uniforms.uInputClamp;\n    const globalFrame = uniforms.uGlobalFrame;\n    const outputTexture = uniforms.uOutputTexture;\n    if (isFinalTarget) {\n      let lastIndex = this._filterStackIndex;\n      while (lastIndex > 0) {\n        lastIndex--;\n        const filterData2 = this._filterStack[this._filterStackIndex - 1];\n        if (!filterData2.skip) {\n          offset.x = filterData2.bounds.minX;\n          offset.y = filterData2.bounds.minY;\n          break;\n        }\n      }\n      outputFrame[0] = bounds.minX - offset.x;\n      outputFrame[1] = bounds.minY - offset.y;\n    } else {\n      outputFrame[0] = 0;\n      outputFrame[1] = 0;\n    }\n    outputFrame[2] = input.frame.width;\n    outputFrame[3] = input.frame.height;\n    inputSize[0] = input.source.width;\n    inputSize[1] = input.source.height;\n    inputSize[2] = 1 / inputSize[0];\n    inputSize[3] = 1 / inputSize[1];\n    inputPixel[0] = input.source.pixelWidth;\n    inputPixel[1] = input.source.pixelHeight;\n    inputPixel[2] = 1 / inputPixel[0];\n    inputPixel[3] = 1 / inputPixel[1];\n    inputClamp[0] = 0.5 * inputPixel[2];\n    inputClamp[1] = 0.5 * inputPixel[3];\n    inputClamp[2] = input.frame.width * inputSize[2] - 0.5 * inputPixel[2];\n    inputClamp[3] = input.frame.height * inputSize[3] - 0.5 * inputPixel[3];\n    const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n    globalFrame[0] = offset.x * resolution;\n    globalFrame[1] = offset.y * resolution;\n    globalFrame[2] = rootTexture.source.width * resolution;\n    globalFrame[3] = rootTexture.source.height * resolution;\n    const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n    renderer.renderTarget.bind(output, !!clear);\n    if (output instanceof Texture) {\n      outputTexture[0] = output.frame.width;\n      outputTexture[1] = output.frame.height;\n    } else {\n      outputTexture[0] = renderTarget.width;\n      outputTexture[1] = renderTarget.height;\n    }\n    outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n    filterUniforms.update();\n    if (renderer.renderPipes.uniformBatch) {\n      const batchUniforms = renderer.renderPipes.uniformBatch.getUboResource(filterUniforms);\n      this._globalFilterBindGroup.setResource(batchUniforms, 0);\n    } else {\n      this._globalFilterBindGroup.setResource(filterUniforms, 0);\n    }\n    this._globalFilterBindGroup.setResource(input.source, 1);\n    this._globalFilterBindGroup.setResource(input.source.style, 2);\n    filter.groups[0] = this._globalFilterBindGroup;\n    renderer.encoder.draw({\n      geometry: quadGeometry,\n      shader: filter,\n      state: filter._state,\n      topology: \"triangle-list\"\n    });\n    if (renderer.type === RendererType.WEBGL) {\n      renderer.renderTarget.finishRenderPass();\n    }\n  }\n  _getFilterData() {\n    return {\n      skip: false,\n      inputTexture: null,\n      bounds: new Bounds(),\n      container: null,\n      filterEffect: null,\n      blendRequired: false,\n      previousRenderSurface: null\n    };\n  }\n  /**\n   * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n   *\n   * Use `outputMatrix * vTextureCoord` in the shader.\n   * @param outputMatrix - The matrix to output to.\n   * @param {Sprite} sprite - The sprite to map to.\n   * @returns The mapped matrix.\n   */\n  calculateSpriteMatrix(outputMatrix, sprite) {\n    const data = this._activeFilterData;\n    const mappedMatrix = outputMatrix.set(\n      data.inputTexture._source.width,\n      0,\n      0,\n      data.inputTexture._source.height,\n      data.bounds.minX,\n      data.bounds.minY\n    );\n    const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n    worldTransform.invert();\n    mappedMatrix.prepend(worldTransform);\n    mappedMatrix.scale(\n      1 / sprite.texture.frame.width,\n      1 / sprite.texture.frame.height\n    );\n    mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n    return mappedMatrix;\n  }\n}\n/** @ignore */\nFilterSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"filter\"\n};\n\nexport { FilterSystem };\n//# sourceMappingURL=FilterSystem.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst _MeshGeometry = class _MeshGeometry extends Geometry {\n  constructor(...args) {\n    let options = args[0] ?? {};\n    if (options instanceof Float32Array) {\n      deprecation(v8_0_0, \"use new MeshGeometry({ positions, uvs, indices }) instead\");\n      options = {\n        positions: options,\n        uvs: args[1],\n        indices: args[2]\n      };\n    }\n    options = { ..._MeshGeometry.defaultOptions, ...options };\n    const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    const uvs = options.uvs || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n    const shrinkToFit = options.shrinkBuffersToFit;\n    const positionBuffer = new Buffer({\n      data: positions,\n      label: \"attribute-mesh-positions\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const uvBuffer = new Buffer({\n      data: uvs,\n      label: \"attribute-mesh-uvs\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const indexBuffer = new Buffer({\n      data: indices,\n      label: \"index-mesh-buffer\",\n      shrinkToFit,\n      usage: BufferUsage.INDEX | BufferUsage.COPY_DST\n    });\n    super({\n      attributes: {\n        aPosition: {\n          buffer: positionBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        },\n        aUV: {\n          buffer: uvBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        }\n      },\n      indexBuffer,\n      topology: options.topology\n    });\n    this.batchMode = \"auto\";\n  }\n  /** The positions of the mesh. */\n  get positions() {\n    return this.attributes.aPosition.buffer.data;\n  }\n  set positions(value) {\n    this.attributes.aPosition.buffer.data = value;\n  }\n  /** The UVs of the mesh. */\n  get uvs() {\n    return this.attributes.aUV.buffer.data;\n  }\n  set uvs(value) {\n    this.attributes.aUV.buffer.data = value;\n  }\n  /** The indices of the mesh. */\n  get indices() {\n    return this.indexBuffer.data;\n  }\n  set indices(value) {\n    this.indexBuffer.data = value;\n  }\n};\n_MeshGeometry.defaultOptions = {\n  topology: \"triangle-list\",\n  shrinkBuffersToFit: false\n};\nlet MeshGeometry = _MeshGeometry;\n\nexport { MeshGeometry };\n//# sourceMappingURL=MeshGeometry.mjs.map\n","import { Color } from '../../../color/Color.mjs';\n\n\"use strict\";\nfunction textStyleToCSS(style) {\n  const stroke = style._stroke;\n  const fill = style._fill;\n  const cssStyleString = [\n    `color: ${Color.shared.setValue(fill.color).toHex()}`,\n    `font-size: ${style.fontSize}px`,\n    `font-family: ${style.fontFamily}`,\n    `font-weight: ${style.fontWeight}`,\n    `font-style: ${style.fontStyle}`,\n    `font-variant: ${style.fontVariant}`,\n    `letter-spacing: ${style.letterSpacing}px`,\n    `text-align: ${style.align}`,\n    `padding: ${style.padding}px`,\n    `white-space: ${style.whiteSpace === \"pre\" && style.wordWrap ? \"pre-wrap\" : style.whiteSpace}`,\n    ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n    ...style.wordWrap ? [\n      `word-wrap: ${style.breakWords ? \"break-all\" : \"break-word\"}`,\n      `max-width: ${style.wordWrapWidth}px`\n    ] : [],\n    ...stroke ? [strokeToCSS(stroke)] : [],\n    ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n    ...style.cssOverrides\n  ].join(\";\");\n  const cssStyles = [`div { ${cssStyleString} }`];\n  tagStyleToCSS(style.tagStyles, cssStyles);\n  return cssStyles.join(\" \");\n}\nfunction dropShadowToCSS(dropShadowStyle) {\n  const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n  const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const position = `${x}px ${y}px`;\n  if (dropShadowStyle.blur > 0) {\n    return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n  }\n  return `text-shadow: ${position} ${color}`;\n}\nfunction strokeToCSS(stroke) {\n  return [\n    `-webkit-text-stroke-width: ${stroke.width}px`,\n    `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    `text-stroke-width: ${stroke.width}px`,\n    `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    \"paint-order: stroke\"\n  ].join(\";\");\n}\nconst templates = {\n  fontSize: `font-size: {{VALUE}}px`,\n  fontFamily: `font-family: {{VALUE}}`,\n  fontWeight: `font-weight: {{VALUE}}`,\n  fontStyle: `font-style: {{VALUE}}`,\n  fontVariant: `font-variant: {{VALUE}}`,\n  letterSpacing: `letter-spacing: {{VALUE}}px`,\n  align: `text-align: {{VALUE}}`,\n  padding: `padding: {{VALUE}}px`,\n  whiteSpace: `white-space: {{VALUE}}`,\n  lineHeight: `line-height: {{VALUE}}px`,\n  wordWrapWidth: `max-width: {{VALUE}}px`\n};\nconst transform = {\n  fill: (value) => `color: ${Color.shared.setValue(value).toHex()}`,\n  breakWords: (value) => `word-wrap: ${value ? \"break-all\" : \"break-word\"}`,\n  stroke: strokeToCSS,\n  dropShadow: dropShadowToCSS\n};\nfunction tagStyleToCSS(tagStyles, out) {\n  for (const i in tagStyles) {\n    const tagStyle = tagStyles[i];\n    const cssTagStyle = [];\n    for (const j in tagStyle) {\n      if (transform[j]) {\n        cssTagStyle.push(transform[j](tagStyle[j]));\n      } else if (templates[j]) {\n        cssTagStyle.push(templates[j].replace(\"{{VALUE}}\", tagStyle[j]));\n      }\n    }\n    out.push(`${i} { ${cssTagStyle.join(\";\")} }`);\n  }\n}\n\nexport { textStyleToCSS };\n//# sourceMappingURL=textStyleToCSS.mjs.map\n","import { warn } from '../../utils/logging/warn.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey.mjs';\nimport { textStyleToCSS } from './utils/textStyleToCSS.mjs';\n\n\"use strict\";\nclass HTMLTextStyle extends TextStyle {\n  constructor(options = {}) {\n    super(options);\n    this._cssOverrides = [];\n    this.cssOverrides ?? (this.cssOverrides = options.cssOverrides);\n    this.tagStyles = options.tagStyles ?? {};\n  }\n  /** List of style overrides that will be applied to the HTML text. */\n  set cssOverrides(value) {\n    this._cssOverrides = value instanceof Array ? value : [value];\n    this.update();\n  }\n  get cssOverrides() {\n    return this._cssOverrides;\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join(\"-\");\n    return this._styleKey;\n  }\n  update() {\n    this._cssStyle = null;\n    super.update();\n  }\n  /**\n   * Creates a new HTMLTextStyle object with the same values as this one.\n   * @returns New cloned HTMLTextStyle object\n   */\n  clone() {\n    return new HTMLTextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth,\n      cssOverrides: this.cssOverrides\n    });\n  }\n  get cssStyle() {\n    if (!this._cssStyle) {\n      this._cssStyle = textStyleToCSS(this);\n    }\n    return this._cssStyle;\n  }\n  /**\n   * Add a style override, this can be any CSS property\n   * it will override any built-in style. This is the\n   * property and the value as a string (e.g., `color: red`).\n   * This will override any other internal style.\n   * @param {string} value - CSS style(s) to add.\n   * @example\n   * style.addOverride('background-color: red');\n   */\n  addOverride(...value) {\n    const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n    if (toAdd.length > 0) {\n      this.cssOverrides.push(...toAdd);\n      this.update();\n    }\n  }\n  /**\n   * Remove any overrides that match the value.\n   * @param {string} value - CSS style to remove.\n   * @example\n   * style.removeOverride('background-color: red');\n   */\n  removeOverride(...value) {\n    const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n    if (toRemove.length > 0) {\n      this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n      this.update();\n    }\n  }\n  set fill(value) {\n    if (typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color fill is not supported by HTMLText\");\n    }\n    super.fill = value;\n  }\n  set stroke(value) {\n    if (value && typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color stroke is not supported by HTMLText\");\n    }\n    super.stroke = value;\n  }\n}\n\nexport { HTMLTextStyle };\n//# sourceMappingURL=HtmlTextStyle.mjs.map\n","\"use strict\";\nconst nssvg = \"http://www.w3.org/2000/svg\";\nconst nsxhtml = \"http://www.w3.org/1999/xhtml\";\nclass HTMLTextRenderData {\n  constructor() {\n    this.svgRoot = document.createElementNS(nssvg, \"svg\");\n    this.foreignObject = document.createElementNS(nssvg, \"foreignObject\");\n    this.domElement = document.createElementNS(nsxhtml, \"div\");\n    this.styleElement = document.createElementNS(nsxhtml, \"style\");\n    this.image = new Image();\n    const { foreignObject, svgRoot, styleElement, domElement } = this;\n    foreignObject.setAttribute(\"width\", \"10000\");\n    foreignObject.setAttribute(\"height\", \"10000\");\n    foreignObject.style.overflow = \"hidden\";\n    svgRoot.appendChild(foreignObject);\n    foreignObject.appendChild(styleElement);\n    foreignObject.appendChild(domElement);\n  }\n}\n\nexport { HTMLTextRenderData, nssvg, nsxhtml };\n//# sourceMappingURL=HTMLTextRenderData.mjs.map\n","import { CanvasTextMetrics } from '../../text/canvas/CanvasTextMetrics.mjs';\nimport { HTMLTextRenderData } from '../HTMLTextRenderData.mjs';\n\n\"use strict\";\nlet tempHTMLTextRenderData;\nfunction measureHtmlText(text, style, fontStyleCSS, htmlTextRenderData) {\n  htmlTextRenderData = htmlTextRenderData || tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData());\n  const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div>${text}</div>`;\n  domElement.setAttribute(\"style\", \"transform-origin: top left; display: inline-block\");\n  if (fontStyleCSS) {\n    styleElement.textContent = fontStyleCSS;\n  }\n  document.body.appendChild(svgRoot);\n  const contentBounds = domElement.getBoundingClientRect();\n  svgRoot.remove();\n  const descenderPadding = CanvasTextMetrics.measureFont(style.fontStyle).descent;\n  return {\n    width: contentBounds.width,\n    height: contentBounds.height + descenderPadding\n  };\n}\n\nexport { measureHtmlText };\n//# sourceMappingURL=measureHtmlText.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../gpu/colorToUniform.mjs';\nimport { BatchableGraphics } from './BatchableGraphics.mjs';\n\n\"use strict\";\nclass GraphicsPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    // batchable graphics list, used to render batches\n    this._graphicsBatchesHash = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n  }\n  validateRenderable(graphics) {\n    const context = graphics.context;\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n    if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(graphics, instructionSet) {\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (graphics._didGraphicsUpdate) {\n      graphics._didGraphicsUpdate = false;\n      this._rebuild(graphics);\n    }\n    if (gpuContext.isBatchable) {\n      this._addToBatcher(graphics, instructionSet);\n    } else {\n      this.renderer.renderPipes.batch.break(instructionSet);\n      instructionSet.add(graphics);\n    }\n  }\n  updateRenderable(graphics) {\n    const batches = this._graphicsBatchesHash[graphics.uid];\n    if (batches) {\n      for (let i = 0; i < batches.length; i++) {\n        const batch = batches[i];\n        batch.batcher.updateElement(batch);\n      }\n    }\n  }\n  destroyRenderable(graphics) {\n    if (this._graphicsBatchesHash[graphics.uid]) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n  }\n  execute(graphics) {\n    if (!graphics.isRenderable)\n      return;\n    const renderer = this.renderer;\n    const context = graphics.context;\n    const contextSystem = renderer.graphicsContext;\n    if (!contextSystem.getGpuContext(context).batches.length) {\n      return;\n    }\n    const shader = context.customShader || this._adaptor.shader;\n    this.state.blendMode = graphics.groupBlendMode;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = graphics.groupTransform;\n    localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n    color32BitToUniform(\n      graphics.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, graphics);\n  }\n  _rebuild(graphics) {\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (wasBatched) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    if (gpuContext.isBatchable) {\n      this._initBatchesForRenderable(graphics);\n    }\n    graphics.batched = gpuContext.isBatchable;\n  }\n  _addToBatcher(graphics, instructionSet) {\n    const batchPipe = this.renderer.renderPipes.batch;\n    const batches = this._getBatchesForRenderable(graphics);\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batchPipe.addToBatch(batch, instructionSet);\n    }\n  }\n  _getBatchesForRenderable(graphics) {\n    return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n  }\n  _initBatchesForRenderable(graphics) {\n    const context = graphics.context;\n    const gpuContext = this.renderer.graphicsContext.getGpuContext(context);\n    const roundPixels = this.renderer._roundPixels | graphics._roundPixels;\n    const batches = gpuContext.batches.map((batch) => {\n      const batchClone = BigPool.get(BatchableGraphics);\n      batch.copyTo(batchClone);\n      batchClone.renderable = graphics;\n      batchClone.roundPixels = roundPixels;\n      return batchClone;\n    });\n    if (this._graphicsBatchesHash[graphics.uid] === void 0) {\n      graphics.on(\"destroyed\", () => {\n        this.destroyRenderable(graphics);\n      });\n    }\n    this._graphicsBatchesHash[graphics.uid] = batches;\n    return batches;\n  }\n  _removeBatchForRenderable(graphicsUid) {\n    this._graphicsBatchesHash[graphicsUid].forEach((batch) => {\n      BigPool.return(batch);\n    });\n    this._graphicsBatchesHash[graphicsUid] = null;\n  }\n  destroy() {\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.state = null;\n    for (const i in this._graphicsBatchesHash) {\n      this._removeBatchForRenderable(i);\n    }\n    this._graphicsBatchesHash = null;\n  }\n}\n/** @ignore */\nGraphicsPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"graphics\"\n};\n\nexport { GraphicsPipe };\n//# sourceMappingURL=GraphicsPipe.mjs.map\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nconst _PlaneGeometry = class _PlaneGeometry extends MeshGeometry {\n  constructor(...args) {\n    super({});\n    let options = args[0] ?? {};\n    if (typeof options === \"number\") {\n      deprecation(v8_0_0, \"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead\");\n      options = {\n        width: options,\n        height: args[1],\n        verticesX: args[2],\n        verticesY: args[3]\n      };\n    }\n    this.build(options);\n  }\n  /**\n   * Refreshes plane coordinates\n   * @param options - Options to be applied to plane geometry\n   */\n  build(options) {\n    options = { ..._PlaneGeometry.defaultOptions, ...options };\n    this.verticesX = this.verticesX ?? options.verticesX;\n    this.verticesY = this.verticesY ?? options.verticesY;\n    this.width = this.width ?? options.width;\n    this.height = this.height ?? options.height;\n    const total = this.verticesX * this.verticesY;\n    const verts = [];\n    const uvs = [];\n    const indices = [];\n    const verticesX = this.verticesX - 1;\n    const verticesY = this.verticesY - 1;\n    const sizeX = this.width / verticesX;\n    const sizeY = this.height / verticesY;\n    for (let i = 0; i < total; i++) {\n      const x = i % this.verticesX;\n      const y = i / this.verticesX | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / verticesX, y / verticesY);\n    }\n    const totalSub = verticesX * verticesY;\n    for (let i = 0; i < totalSub; i++) {\n      const xpos = i % verticesX;\n      const ypos = i / verticesX | 0;\n      const value = ypos * this.verticesX + xpos;\n      const value2 = ypos * this.verticesX + xpos + 1;\n      const value3 = (ypos + 1) * this.verticesX + xpos;\n      const value4 = (ypos + 1) * this.verticesX + xpos + 1;\n      indices.push(\n        value,\n        value2,\n        value3,\n        value2,\n        value4,\n        value3\n      );\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint32Array(indices);\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  }\n};\n_PlaneGeometry.defaultOptions = {\n  width: 100,\n  height: 100,\n  verticesX: 10,\n  verticesY: 10\n};\nlet PlaneGeometry = _PlaneGeometry;\n\nexport { PlaneGeometry };\n//# sourceMappingURL=PlaneGeometry.mjs.map\n","\"use strict\";\nclass BatchableMesh {\n  constructor() {\n    this.batcher = null;\n    this.batch = null;\n    this.roundPixels = 0;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  get blendMode() {\n    return this.mesh.groupBlendMode;\n  }\n  reset() {\n    this.mesh = null;\n    this.texture = null;\n    this.batcher = null;\n    this.batch = null;\n  }\n  packIndex(indexBuffer, index, indicesOffset) {\n    const indices = this.geometry.indices;\n    for (let i = 0; i < indices.length; i++) {\n      indexBuffer[index++] = indices[i] + indicesOffset;\n    }\n  }\n  packAttributes(float32View, uint32View, index, textureId) {\n    const mesh = this.mesh;\n    const geometry = this.geometry;\n    const wt = mesh.groupTransform;\n    const textureIdAndRound = textureId << 16 | this.roundPixels & 65535;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const positions = geometry.positions;\n    const uvBuffer = geometry.getBuffer(\"aUV\");\n    const uvs = uvBuffer.data;\n    let transformedUvs = uvs;\n    const textureMatrix = this.texture.textureMatrix;\n    if (!textureMatrix.isSimple) {\n      transformedUvs = this._transformedUvs;\n      if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID) {\n        if (!transformedUvs || transformedUvs.length < uvs.length) {\n          transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n        }\n        this._textureMatrixUpdateId = textureMatrix._updateID;\n        this._uvUpdateId = uvBuffer._updateID;\n        textureMatrix.multiplyUvs(uvs, transformedUvs);\n      }\n    }\n    const abgr = mesh.groupColorAlpha;\n    for (let i = 0; i < positions.length; i += 2) {\n      const x = positions[i];\n      const y = positions[i + 1];\n      float32View[index] = a * x + c * y + tx;\n      float32View[index + 1] = b * x + d * y + ty;\n      float32View[index + 2] = transformedUvs[i];\n      float32View[index + 3] = transformedUvs[i + 1];\n      uint32View[index + 4] = abgr;\n      uint32View[index + 5] = textureIdAndRound;\n      index += 6;\n    }\n  }\n  get vertexSize() {\n    return this.geometry.positions.length / 2;\n  }\n  get indexSize() {\n    return this.geometry.indices.length;\n  }\n}\n\nexport { BatchableMesh };\n//# sourceMappingURL=BatchableMesh.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from './BatchableMesh.mjs';\n\n\"use strict\";\nclass MeshPipe {\n  constructor(renderer, adaptor) {\n    this.localUniforms = new UniformGroup({\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    this.localUniformsBindGroup = new BindGroup({\n      0: this.localUniforms\n    });\n    this._meshDataHash = /* @__PURE__ */ Object.create(null);\n    this._gpuBatchableMeshHash = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n  }\n  validateRenderable(mesh) {\n    const meshData = this._getMeshData(mesh);\n    const wasBatched = meshData.batched;\n    const isBatched = mesh.batched;\n    meshData.batched = isBatched;\n    if (wasBatched !== isBatched) {\n      return true;\n    } else if (isBatched) {\n      const geometry = mesh._geometry;\n      if (geometry.indices.length !== meshData.indexSize || geometry.positions.length !== meshData.vertexSize) {\n        meshData.indexSize = geometry.indices.length;\n        meshData.vertexSize = geometry.positions.length;\n        return true;\n      }\n      const batchableMesh = this._getBatchableMesh(mesh);\n      const texture = mesh.texture;\n      if (batchableMesh.texture._source !== texture._source) {\n        if (batchableMesh.texture._source !== texture._source) {\n          return !batchableMesh.batcher.checkAndUpdateTexture(batchableMesh, texture);\n        }\n      }\n    }\n    return false;\n  }\n  addRenderable(mesh, instructionSet) {\n    const batcher = this.renderer.renderPipes.batch;\n    const { batched } = this._getMeshData(mesh);\n    if (batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.texture = mesh._texture;\n      gpuBatchableMesh.geometry = mesh._geometry;\n      batcher.addToBatch(gpuBatchableMesh);\n    } else {\n      batcher.break(instructionSet);\n      instructionSet.add({\n        renderPipeId: \"mesh\",\n        mesh\n      });\n    }\n  }\n  updateRenderable(mesh) {\n    if (mesh.batched) {\n      const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n      gpuBatchableMesh.texture = mesh._texture;\n      gpuBatchableMesh.geometry = mesh._geometry;\n      gpuBatchableMesh.batcher.updateElement(gpuBatchableMesh);\n    }\n  }\n  destroyRenderable(mesh) {\n    this._meshDataHash[mesh.uid] = null;\n    const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n    if (gpuMesh) {\n      BigPool.return(gpuMesh);\n      this._gpuBatchableMeshHash[mesh.uid] = null;\n    }\n  }\n  execute({ mesh }) {\n    if (!mesh.isRenderable)\n      return;\n    mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n    const localUniforms = this.localUniforms;\n    localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n    localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n    localUniforms.update();\n    color32BitToUniform(\n      mesh.groupColorAlpha,\n      localUniforms.uniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, mesh);\n  }\n  _getMeshData(mesh) {\n    return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n  }\n  _initMeshData(mesh) {\n    this._meshDataHash[mesh.uid] = {\n      batched: mesh.batched,\n      indexSize: mesh._geometry.indices?.length,\n      vertexSize: mesh._geometry.positions?.length\n    };\n    mesh.on(\"destroyed\", () => {\n      this.destroyRenderable(mesh);\n    });\n    return this._meshDataHash[mesh.uid];\n  }\n  _getBatchableMesh(mesh) {\n    return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n  }\n  _initBatchableMesh(mesh) {\n    const gpuMesh = BigPool.get(BatchableMesh);\n    gpuMesh.mesh = mesh;\n    gpuMesh.texture = mesh._texture;\n    gpuMesh.roundPixels = this.renderer._roundPixels | mesh._roundPixels;\n    this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n    gpuMesh.mesh = mesh;\n    return gpuMesh;\n  }\n  destroy() {\n    for (const i in this._gpuBatchableMeshHash) {\n      if (this._gpuBatchableMeshHash[i]) {\n        BigPool.return(this._gpuBatchableMeshHash[i]);\n      }\n    }\n    this._gpuBatchableMeshHash = null;\n    this._meshDataHash = null;\n    this.localUniforms = null;\n    this.localUniformsBindGroup = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.renderer = null;\n  }\n}\n/** @ignore */\nMeshPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"mesh\"\n};\n\nexport { MeshPipe };\n//# sourceMappingURL=MeshPipe.mjs.map\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry.mjs';\n\n\"use strict\";\nconst _NineSliceGeometry = class _NineSliceGeometry extends PlaneGeometry {\n  constructor(options = {}) {\n    options = { ..._NineSliceGeometry.defaultOptions, ...options };\n    super({\n      width: options.width,\n      height: options.height,\n      verticesX: 4,\n      verticesY: 4\n    });\n    this.update(options);\n  }\n  /**\n   * Updates the NineSliceGeometry with the options.\n   * @param options - The options of the NineSliceGeometry.\n   */\n  update(options) {\n    this.width = options.width ?? this.width;\n    this.height = options.height ?? this.height;\n    this._originalWidth = options.originalWidth ?? this._originalWidth;\n    this._originalHeight = options.originalHeight ?? this._originalHeight;\n    this._leftWidth = options.leftWidth ?? this._leftWidth;\n    this._rightWidth = options.rightWidth ?? this._rightWidth;\n    this._topHeight = options.topHeight ?? this._topHeight;\n    this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n    this.updateUvs();\n    this.updatePositions();\n  }\n  /** Updates the positions of the vertices. */\n  updatePositions() {\n    const positions = this.positions;\n    const w = this._leftWidth + this._rightWidth;\n    const scaleW = this.width > w ? 1 : this.width / w;\n    const h = this._topHeight + this._bottomHeight;\n    const scaleH = this.height > h ? 1 : this.height / h;\n    const scale = Math.min(scaleW, scaleH);\n    positions[9] = positions[11] = positions[13] = positions[15] = this._topHeight * scale;\n    positions[17] = positions[19] = positions[21] = positions[23] = this.height - this._bottomHeight * scale;\n    positions[25] = positions[27] = positions[29] = positions[31] = this.height;\n    positions[2] = positions[10] = positions[18] = positions[26] = this._leftWidth * scale;\n    positions[4] = positions[12] = positions[20] = positions[28] = this.width - this._rightWidth * scale;\n    positions[6] = positions[14] = positions[22] = positions[30] = this.width;\n    this.getBuffer(\"aPosition\").update();\n  }\n  /** Updates the UVs of the vertices. */\n  updateUvs() {\n    const uvs = this.uvs;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    const _uvw = 1 / this._originalWidth;\n    const _uvh = 1 / this._originalHeight;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.getBuffer(\"aUV\").update();\n  }\n};\n/** The default options for the NineSliceGeometry. */\n_NineSliceGeometry.defaultOptions = {\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  width: 100,\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  height: 100,\n  /** The width of the left column. */\n  leftWidth: 10,\n  /** The height of the top row. */\n  topHeight: 10,\n  /** The width of the right column. */\n  rightWidth: 10,\n  /** The height of the bottom row. */\n  bottomHeight: 10,\n  /** The original width of the texture */\n  originalWidth: 100,\n  /** The original height of the texture */\n  originalHeight: 100\n};\nlet NineSliceGeometry = _NineSliceGeometry;\n\nexport { NineSliceGeometry };\n//# sourceMappingURL=NineSliceGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { NineSliceGeometry } from './NineSliceGeometry.mjs';\n\n\"use strict\";\nclass NineSliceSpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  addRenderable(sprite, _instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite.batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const texture = sprite._texture;\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (gpuSprite.texture._source !== texture._source) {\n      return !gpuSprite.batcher.checkAndUpdateTexture(gpuSprite, texture);\n    }\n    return false;\n  }\n  destroyRenderable(sprite) {\n    const batchableSprite = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableSprite);\n    this._gpuSpriteHash[sprite.uid] = null;\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    sprite._didSpriteUpdate = false;\n    batchableSprite.geometry.update(sprite);\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableMesh = new BatchableMesh();\n    batchableMesh.geometry = new NineSliceGeometry();\n    batchableMesh.mesh = sprite;\n    batchableMesh.texture = sprite._texture;\n    batchableMesh.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableMesh;\n    sprite.on(\"destroyed\", () => {\n      this.destroyRenderable(sprite);\n    });\n    return batchableMesh;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      const batchableMesh = this._gpuSpriteHash[i];\n      batchableMesh.geometry.destroy();\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nNineSliceSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"nineSliceSprite\"\n};\n\nexport { NineSliceSpritePipe };\n//# sourceMappingURL=NineSliceSpritePipe.mjs.map\n","\"use strict\";\nconst tilingBit = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    )\n  }\n};\nconst tilingBitGl = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    )\n  }\n};\n\nexport { tilingBit, tilingBitGl };\n//# sourceMappingURL=tilingBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { tilingBit, tilingBitGl } from './tilingBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass TilingSpriteShader extends Shader {\n  constructor() {\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBit,\n        tilingBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBitGl,\n        tilingBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    const tilingUniforms = new UniformGroup({\n      uMapCoord: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: \"vec4<f32>\" },\n      uClampOffset: { value: new Float32Array([0, 0]), type: \"vec2<f32>\" },\n      uTextureTransform: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: \"vec4<f32>\" }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: new UniformGroup({\n          uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n          uRound: { value: 0, type: \"f32\" }\n        }),\n        tilingUniforms,\n        uTexture: Texture.EMPTY.source,\n        uSampler: Texture.EMPTY.source.style\n      }\n    });\n  }\n  updateUniforms(width, height, matrix, anchorX, anchorY, texture) {\n    const tilingUniforms = this.resources.tilingUniforms;\n    const textureWidth = texture.width;\n    const textureHeight = texture.height;\n    const textureMatrix = texture.textureMatrix;\n    const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n    uTextureTransform.set(\n      matrix.a * textureWidth / width,\n      matrix.b * textureWidth / height,\n      matrix.c * textureHeight / width,\n      matrix.d * textureHeight / height,\n      matrix.tx / width,\n      matrix.ty / height\n    );\n    uTextureTransform.invert();\n    tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n    tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n    tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n    tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n    tilingUniforms.uniforms.uSizeAnchor[0] = width;\n    tilingUniforms.uniforms.uSizeAnchor[1] = height;\n    tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n    tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n    if (texture) {\n      this.resources.uTexture = texture.source;\n      this.resources.uSampler = texture.source.style;\n    }\n  }\n}\n\nexport { TilingSpriteShader };\n//# sourceMappingURL=TilingSpriteShader.mjs.map\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nclass QuadGeometry extends MeshGeometry {\n  constructor() {\n    super({\n      positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      indices: new Uint32Array([0, 1, 2, 0, 2, 3])\n    });\n  }\n}\n\nexport { QuadGeometry };\n//# sourceMappingURL=QuadGeometry.mjs.map\n","\"use strict\";\nfunction setPositions(tilingSprite, positions) {\n  const anchorX = tilingSprite.anchor.x;\n  const anchorY = tilingSprite.anchor.y;\n  positions[0] = -anchorX * tilingSprite.width;\n  positions[1] = -anchorY * tilingSprite.height;\n  positions[2] = (1 - anchorX) * tilingSprite.width;\n  positions[3] = -anchorY * tilingSprite.height;\n  positions[4] = (1 - anchorX) * tilingSprite.width;\n  positions[5] = (1 - anchorY) * tilingSprite.height;\n  positions[6] = -anchorX * tilingSprite.width;\n  positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n\nexport { setPositions };\n//# sourceMappingURL=setPositions.mjs.map\n","\"use strict\";\nfunction applyMatrix(array, stride, offset, matrix) {\n  let index = 0;\n  const size = array.length / (stride || 2);\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  offset *= stride;\n  while (index < size) {\n    const x = array[offset];\n    const y = array[offset + 1];\n    array[offset] = a * x + c * y + tx;\n    array[offset + 1] = b * x + d * y + ty;\n    offset += stride;\n    index++;\n  }\n}\n\nexport { applyMatrix };\n//# sourceMappingURL=applyMatrix.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { applyMatrix } from './applyMatrix.mjs';\n\n\"use strict\";\nfunction setUvs(tilingSprite, uvs) {\n  const texture = tilingSprite.texture;\n  const width = texture.frame.width;\n  const height = texture.frame.height;\n  let anchorX = 0;\n  let anchorY = 0;\n  if (tilingSprite._applyAnchorToTexture) {\n    anchorX = tilingSprite.anchor.x;\n    anchorY = tilingSprite.anchor.y;\n  }\n  uvs[0] = uvs[6] = -anchorX;\n  uvs[2] = uvs[4] = 1 - anchorX;\n  uvs[1] = uvs[3] = -anchorY;\n  uvs[5] = uvs[7] = 1 - anchorY;\n  const textureMatrix = Matrix.shared;\n  textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n  textureMatrix.tx /= tilingSprite.width;\n  textureMatrix.ty /= tilingSprite.height;\n  textureMatrix.invert();\n  textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n  applyMatrix(uvs, 2, 0, textureMatrix);\n}\n\nexport { setUvs };\n//# sourceMappingURL=setUvs.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../rendering/renderers/shared/state/State.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader.mjs';\nimport { QuadGeometry } from './utils/QuadGeometry.mjs';\nimport { setPositions } from './utils/setPositions.mjs';\nimport { setUvs } from './utils/setUvs.mjs';\n\n\"use strict\";\nconst sharedQuad = new QuadGeometry();\nclass TilingSpritePipe {\n  constructor(renderer) {\n    this._state = State.default2d;\n    this._tilingSpriteDataHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  validateRenderable(renderable) {\n    const tilingSpriteData = this._getTilingSpriteData(renderable);\n    const couldBatch = tilingSpriteData.canBatch;\n    this._updateCanBatch(renderable);\n    const canBatch = tilingSpriteData.canBatch;\n    if (canBatch && canBatch === couldBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (batchableMesh && batchableMesh.texture._source !== renderable.texture._source) {\n        return !batchableMesh.batcher.checkAndUpdateTexture(batchableMesh, renderable.texture);\n      }\n    }\n    return couldBatch !== canBatch;\n  }\n  addRenderable(tilingSprite, instructionSet) {\n    const batcher = this._renderer.renderPipes.batch;\n    this._updateCanBatch(tilingSprite);\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { geometry, canBatch } = tilingSpriteData;\n    if (canBatch) {\n      tilingSpriteData.batchableMesh || (tilingSpriteData.batchableMesh = new BatchableMesh());\n      const batchableMesh = tilingSpriteData.batchableMesh;\n      if (tilingSprite._didTilingSpriteUpdate) {\n        tilingSprite._didTilingSpriteUpdate = false;\n        this._updateBatchableMesh(tilingSprite);\n        batchableMesh.geometry = geometry;\n        batchableMesh.mesh = tilingSprite;\n        batchableMesh.texture = tilingSprite._texture;\n      }\n      batchableMesh.roundPixels = this._renderer._roundPixels | tilingSprite._roundPixels;\n      batcher.addToBatch(batchableMesh);\n    } else {\n      batcher.break(instructionSet);\n      tilingSpriteData.shader || (tilingSpriteData.shader = new TilingSpriteShader());\n      this.updateRenderable(tilingSprite);\n      instructionSet.add(tilingSprite);\n    }\n  }\n  execute(tilingSprite) {\n    const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n    shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n    localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n    color32BitToUniform(\n      tilingSprite.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n    this._renderer.encoder.draw({\n      geometry: sharedQuad,\n      shader,\n      state: this._state\n    });\n  }\n  updateRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { canBatch } = tilingSpriteData;\n    if (canBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (tilingSprite._didTilingSpriteUpdate)\n        this._updateBatchableMesh(tilingSprite);\n      batchableMesh.batcher.updateElement(batchableMesh);\n    } else if (tilingSprite._didTilingSpriteUpdate) {\n      const { shader } = tilingSpriteData;\n      shader.updateUniforms(\n        tilingSprite.width,\n        tilingSprite.height,\n        tilingSprite._tileTransform.matrix,\n        tilingSprite.anchor.x,\n        tilingSprite.anchor.y,\n        tilingSprite.texture\n      );\n    }\n    tilingSprite._didTilingSpriteUpdate = false;\n  }\n  destroyRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    tilingSpriteData.batchableMesh = null;\n    tilingSpriteData.shader?.destroy();\n    this._tilingSpriteDataHash[tilingSprite.uid] = null;\n  }\n  _getTilingSpriteData(renderable) {\n    return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n  }\n  _initTilingSpriteData(tilingSprite) {\n    const geometry = new MeshGeometry({\n      indices: sharedQuad.indices,\n      positions: sharedQuad.positions.slice(),\n      uvs: sharedQuad.uvs.slice()\n    });\n    this._tilingSpriteDataHash[tilingSprite.uid] = {\n      canBatch: true,\n      renderable: tilingSprite,\n      geometry\n    };\n    tilingSprite.on(\"destroyed\", () => {\n      this.destroyRenderable(tilingSprite);\n    });\n    return this._tilingSpriteDataHash[tilingSprite.uid];\n  }\n  _updateBatchableMesh(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const { geometry } = renderableData;\n    const style = tilingSprite.texture.source.style;\n    if (style.addressMode !== \"repeat\") {\n      style.addressMode = \"repeat\";\n      style.update();\n    }\n    setUvs(tilingSprite, geometry.uvs);\n    setPositions(tilingSprite, geometry.positions);\n  }\n  destroy() {\n    for (const i in this._tilingSpriteDataHash) {\n      this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n    }\n    this._tilingSpriteDataHash = null;\n    this._renderer = null;\n  }\n  _updateCanBatch(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const texture = tilingSprite.texture;\n    let _nonPowOf2wrapping = true;\n    if (this._renderer.type === RendererType.WEBGL) {\n      _nonPowOf2wrapping = this._renderer.context.supports.nonPowOf2wrapping;\n    }\n    renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n    return renderableData.canBatch;\n  }\n}\n/** @ignore */\nTilingSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"tilingSprite\"\n};\n\nexport { TilingSpritePipe };\n//# sourceMappingURL=TilingSpritePipe.mjs.map\n","\"use strict\";\nconst localUniformMSDFBit = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `\n    ),\n    main: (\n      /* wgsl */\n      ` \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n    )\n  }\n};\nconst localUniformMSDFBitGl = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform float uDistance;\n         `\n    ),\n    main: (\n      /* glsl */\n      ` \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n    )\n  }\n};\n\nexport { localUniformMSDFBit, localUniformMSDFBitGl };\n//# sourceMappingURL=localUniformMSDFBit.mjs.map\n","\"use strict\";\nconst mSDFBit = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        `\n    )\n  }\n};\nconst mSDFBitGl = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        `\n    )\n  }\n};\n\nexport { mSDFBit, mSDFBitGl };\n//# sourceMappingURL=mSDFBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBit, generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit.mjs';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass SdfShader extends Shader {\n  constructor() {\n    const uniforms = new UniformGroup({\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uDistance: { value: 4, type: \"f32\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    const maxTextures = getMaxTexturesPerBatch();\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(maxTextures),\n        localUniformMSDFBit,\n        mSDFBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBitGl,\n        generateTextureBatchBitGl(maxTextures),\n        localUniformMSDFBitGl,\n        mSDFBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n}\n\nexport { SdfShader };\n//# sourceMappingURL=SdfShader.mjs.map\n","import { Cache } from '../../assets/cache/Cache.mjs';\nimport { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { Graphics } from '../graphics/shared/Graphics.mjs';\nimport { SdfShader } from '../text/sdfShader/SdfShader.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\n\n\"use strict\";\nclass BitmapTextPipe {\n  // private _sdfShader: SdfShader;\n  constructor(renderer) {\n    this._gpuBitmapText = {};\n    this._renderer = renderer;\n  }\n  validateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n  }\n  addRenderable(bitmapText, instructionSet) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  destroyRenderable(bitmapText) {\n    this._destroyRenderableByUid(bitmapText.uid);\n  }\n  _destroyRenderableByUid(renderableUid) {\n    const context = this._gpuBitmapText[renderableUid].context;\n    if (context.customShader) {\n      BigPool.return(context.customShader);\n      context.customShader = null;\n    }\n    BigPool.return(this._gpuBitmapText[renderableUid]);\n    this._gpuBitmapText[renderableUid] = null;\n  }\n  updateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  _updateContext(bitmapText, proxyGraphics) {\n    const { context } = proxyGraphics;\n    const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n    context.clear();\n    if (bitmapFont.distanceField.type !== \"none\") {\n      if (!context.customShader) {\n        context.customShader = BigPool.get(SdfShader);\n      }\n    }\n    const chars = Array.from(bitmapText.text);\n    const style = bitmapText._style;\n    let currentY = bitmapFont.baseLineOffset;\n    const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont);\n    let index = 0;\n    const padding = style.padding;\n    const scale = bitmapTextLayout.scale;\n    let tx = bitmapTextLayout.width;\n    let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n    if (style._stroke) {\n      tx += style._stroke.width / scale;\n      ty += style._stroke.width / scale;\n    }\n    context.translate(-bitmapText._anchor._x * tx - padding, -bitmapText._anchor._y * ty - padding).scale(scale, scale);\n    const tint = bitmapFont.applyFillAsTint ? style._fill.color : 16777215;\n    for (let i = 0; i < bitmapTextLayout.lines.length; i++) {\n      const line = bitmapTextLayout.lines[i];\n      for (let j = 0; j < line.charPositions.length; j++) {\n        const char = chars[index++];\n        const charData = bitmapFont.chars[char];\n        if (charData?.texture) {\n          context.texture(\n            charData.texture,\n            tint ? tint : \"black\",\n            Math.round(line.charPositions[j] + charData.xOffset),\n            Math.round(currentY + charData.yOffset)\n          );\n        }\n      }\n      currentY += bitmapFont.lineHeight;\n    }\n  }\n  _getGpuBitmapText(bitmapText) {\n    return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n  }\n  initGpuText(bitmapText) {\n    const proxyRenderable = BigPool.get(Graphics);\n    this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n    this._updateContext(bitmapText, proxyRenderable);\n    bitmapText.on(\"destroyed\", () => {\n      this.destroyRenderable(bitmapText);\n    });\n    return this._gpuBitmapText[bitmapText.uid];\n  }\n  _updateDistanceField(bitmapText) {\n    const context = this._getGpuBitmapText(bitmapText).context;\n    const fontFamily = bitmapText._style.fontFamily;\n    const dynamicFont = Cache.get(`${fontFamily}-bitmap`);\n    const { a, b, c, d } = bitmapText.groupTransform;\n    const dx = Math.sqrt(a * a + b * b);\n    const dy = Math.sqrt(c * c + d * d);\n    const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n    const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n    const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n    context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n  }\n  destroy() {\n    for (const uid in this._gpuBitmapText) {\n      this._destroyRenderableByUid(uid);\n    }\n    this._gpuBitmapText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBitmapTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"bitmapText\"\n};\nfunction syncWithProxy(container, proxy) {\n  proxy.groupTransform = container.groupTransform;\n  proxy.groupColorAlpha = container.groupColorAlpha;\n  proxy.groupColor = container.groupColor;\n  proxy.groupBlendMode = container.groupBlendMode;\n  proxy.globalDisplayStatus = container.globalDisplayStatus;\n  proxy.groupTransform = container.groupTransform;\n  proxy.localDisplayStatus = container.localDisplayStatus;\n  proxy.groupAlpha = container.groupAlpha;\n  proxy._roundPixels = container._roundPixels;\n}\n\nexport { BitmapTextPipe };\n//# sourceMappingURL=BitmapTextPipe.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass HTMLTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const newKey = htmlText._getKey();\n    if (gpuText.textureNeedsUploading) {\n      gpuText.textureNeedsUploading = false;\n      return true;\n    }\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite);\n  }\n  updateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    batchableSprite.batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(htmlText) {\n    this._destroyRenderableById(htmlText.uid);\n  }\n  _destroyRenderableById(htmlTextUid) {\n    const gpuText = this._gpuText[htmlTextUid];\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[htmlTextUid] = null;\n  }\n  _updateText(htmlText) {\n    const newKey = htmlText._getKey();\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(htmlText).catch((e) => {\n        console.error(e);\n      });\n    }\n    htmlText._didTextUpdate = false;\n    const padding = htmlText._style.padding;\n    updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n  }\n  async _updateGpuText(htmlText) {\n    htmlText._didTextUpdate = false;\n    const gpuText = this._getGpuText(htmlText);\n    if (gpuText.generatingTexture)\n      return;\n    const newKey = htmlText._getKey();\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    gpuText.generatingTexture = true;\n    gpuText.currentKey = newKey;\n    const resolution = htmlText.resolution ?? this._renderer.resolution;\n    const texture = await this._renderer.htmlText.getManagedTexture(\n      htmlText.text,\n      resolution,\n      htmlText._style,\n      htmlText._getKey()\n    );\n    const batchableSprite = gpuText.batchableSprite;\n    batchableSprite.texture = gpuText.texture = texture;\n    gpuText.generatingTexture = false;\n    gpuText.textureNeedsUploading = true;\n    htmlText.onViewUpdate();\n    const padding = htmlText._style.padding;\n    updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n  }\n  _getGpuText(htmlText) {\n    return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n  }\n  initGpuText(htmlText) {\n    const gpuTextData = {\n      texture: Texture.EMPTY,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite),\n      textureNeedsUploading: false,\n      generatingTexture: false\n    };\n    const batchableSprite = gpuTextData.batchableSprite;\n    batchableSprite.renderable = htmlText;\n    batchableSprite.texture = Texture.EMPTY;\n    batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableSprite.roundPixels = this._renderer._roundPixels | htmlText._roundPixels;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    this._gpuText[htmlText.uid] = gpuTextData;\n    htmlText.on(\"destroyed\", () => {\n      this.destroyRenderable(htmlText);\n    });\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextPipe };\n//# sourceMappingURL=HTMLTextPipe.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\n\n\"use strict\";\nfunction isSafari() {\n  const { userAgent } = DOMAdapter.get().getNavigator();\n  return /^((?!chrome|android).)*safari/i.test(userAgent);\n}\n\nexport { isSafari };\n//# sourceMappingURL=isSafari.mjs.map\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { Bounds } from '../../container/bounds/Bounds.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nfunction getPo2TextureFromSource(image, width, height, resolution) {\n  const bounds = tempBounds;\n  bounds.minX = 0;\n  bounds.minY = 0;\n  bounds.maxX = image.width / resolution | 0;\n  bounds.maxY = image.height / resolution | 0;\n  const texture = TexturePool.getOptimalTexture(\n    bounds.width,\n    bounds.height,\n    resolution,\n    false\n  );\n  texture.source.uploadMethodId = \"image\";\n  texture.source.resource = image;\n  texture.source.alphaMode = \"premultiply-alpha-on-upload\";\n  texture.frame.width = width / resolution;\n  texture.frame.height = height / resolution;\n  texture.source.emit(\"update\", texture.source);\n  texture.updateUvs();\n  return texture;\n}\n\nexport { getPo2TextureFromSource };\n//# sourceMappingURL=getPo2TextureFromSource.mjs.map\n","\"use strict\";\nfunction extractFontFamilies(text, style) {\n  const fontFamily = style.fontFamily;\n  const fontFamilies = [];\n  const dedupe = {};\n  const regex = /font-family:([^;\"\\s]+)/g;\n  const matches = text.match(regex);\n  function addFontFamily(fontFamily2) {\n    if (!dedupe[fontFamily2]) {\n      fontFamilies.push(fontFamily2);\n      dedupe[fontFamily2] = true;\n    }\n  }\n  if (Array.isArray(fontFamily)) {\n    for (let i = 0; i < fontFamily.length; i++) {\n      addFontFamily(fontFamily[i]);\n    }\n  } else {\n    addFontFamily(fontFamily);\n  }\n  if (matches) {\n    matches.forEach((match) => {\n      const fontFamily2 = match.split(\":\")[1].trim();\n      addFontFamily(fontFamily2);\n    });\n  }\n  for (const i in style.tagStyles) {\n    const fontFamily2 = style.tagStyles[i].fontFamily;\n    addFontFamily(fontFamily2);\n  }\n  return fontFamilies;\n}\n\nexport { extractFontFamilies };\n//# sourceMappingURL=extractFontFamilies.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\n\n\"use strict\";\nasync function loadFontAsBase64(url) {\n  const response = await DOMAdapter.get().fetch(url);\n  const blob = await response.blob();\n  const reader = new FileReader();\n  const dataSrc = await new Promise((resolve, reject) => {\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n  return dataSrc;\n}\n\nexport { loadFontAsBase64 };\n//# sourceMappingURL=loadFontAsBase64.mjs.map\n","import { loadFontAsBase64 } from './loadFontAsBase64.mjs';\n\n\"use strict\";\nasync function loadFontCSS(style, url) {\n  const dataSrc = await loadFontAsBase64(url);\n  return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n\nexport { loadFontCSS };\n//# sourceMappingURL=loadFontCSS.mjs.map\n","import { Cache } from '../../../assets/cache/Cache.mjs';\nimport { loadFontCSS } from './loadFontCSS.mjs';\n\n\"use strict\";\nconst FontStylePromiseCache = /* @__PURE__ */ new Map();\nasync function getFontCss(fontFamilies, style, defaultOptions) {\n  const fontPromises = fontFamilies.filter((fontFamily) => Cache.has(`${fontFamily}-and-url`)).map((fontFamily, i) => {\n    if (!FontStylePromiseCache.has(fontFamily)) {\n      const { url } = Cache.get(`${fontFamily}-and-url`);\n      if (i === 0) {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS(style, url));\n      } else {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: defaultOptions.fontWeight,\n          fontStyle: defaultOptions.fontStyle,\n          fontFamily\n        }, url));\n      }\n    }\n    return FontStylePromiseCache.get(fontFamily);\n  });\n  return (await Promise.all(fontPromises)).join(\"\\n\");\n}\n\nexport { FontStylePromiseCache, getFontCss };\n//# sourceMappingURL=getFontCss.mjs.map\n","\"use strict\";\nfunction getSVGUrl(text, style, resolution, fontCSS, htmlTextData) {\n  const { domElement, styleElement, svgRoot } = htmlTextData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div>${text}</div>`;\n  domElement.setAttribute(\"style\", `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n  styleElement.textContent = fontCSS;\n  const { width, height } = htmlTextData.image;\n  svgRoot.setAttribute(\"width\", width.toString());\n  svgRoot.setAttribute(\"height\", height.toString());\n  return new XMLSerializer().serializeToString(svgRoot);\n}\n\nexport { getSVGUrl };\n//# sourceMappingURL=getSVGUrl.mjs.map\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\n\n\"use strict\";\nfunction getTemporaryCanvasFromImage(image, resolution) {\n  const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n    image.width,\n    image.height,\n    resolution\n  );\n  const { context } = canvasAndContext;\n  context.clearRect(0, 0, image.width, image.height);\n  context.drawImage(image, 0, 0);\n  CanvasPool.returnCanvasAndContext(canvasAndContext);\n  return canvasAndContext.canvas;\n}\n\nexport { getTemporaryCanvasFromImage };\n//# sourceMappingURL=getTemporaryCanvasFromImage.mjs.map\n","\"use strict\";\nfunction loadSVGImage(image, url, delay) {\n  return new Promise(async (resolve) => {\n    if (delay) {\n      await new Promise((resolve2) => setTimeout(resolve2, 100));\n    }\n    image.onload = () => {\n      resolve();\n    };\n    image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n    image.crossOrigin = \"anonymous\";\n  });\n}\n\nexport { loadSVGImage };\n//# sourceMappingURL=loadSVGImage.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { isSafari } from '../../utils/browser/isSafari.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource.mjs';\nimport { HTMLTextRenderData } from './HTMLTextRenderData.mjs';\nimport { HTMLTextStyle } from './HtmlTextStyle.mjs';\nimport { extractFontFamilies } from './utils/extractFontFamilies.mjs';\nimport { getFontCss } from './utils/getFontCss.mjs';\nimport { getSVGUrl } from './utils/getSVGUrl.mjs';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage.mjs';\nimport { loadSVGImage } from './utils/loadSVGImage.mjs';\nimport { measureHtmlText } from './utils/measureHtmlText.mjs';\n\n\"use strict\";\nclass HTMLTextSystem {\n  constructor(renderer) {\n    this._activeTextures = {};\n    this._renderer = renderer;\n    this._createCanvas = renderer.type === RendererType.WEBGPU;\n  }\n  getTexture(options) {\n    return this._buildTexturePromise(\n      options.text,\n      options.resolution,\n      options.style\n    );\n  }\n  getManagedTexture(text, resolution, style, textKey) {\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].promise;\n    }\n    const promise = this._buildTexturePromise(text, resolution, style).then((texture) => {\n      this._activeTextures[textKey].texture = texture;\n      return texture;\n    });\n    this._activeTextures[textKey] = {\n      texture: null,\n      promise,\n      usageCount: 1\n    };\n    return promise;\n  }\n  async _buildTexturePromise(text, resolution, style) {\n    const htmlTextData = BigPool.get(HTMLTextRenderData);\n    const fontFamilies = extractFontFamilies(text, style);\n    const fontCSS = await getFontCss(\n      fontFamilies,\n      style,\n      HTMLTextStyle.defaultTextStyle\n    );\n    const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const image = htmlTextData.image;\n    image.width = width | 0;\n    image.height = height | 0;\n    const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n    await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n    let resource = image;\n    if (this._createCanvas) {\n      resource = getTemporaryCanvasFromImage(image, resolution);\n    }\n    const texture = getPo2TextureFromSource(resource, image.width, image.height, resolution);\n    if (this._createCanvas) {\n      this._renderer.texture.initSource(texture.source);\n    }\n    BigPool.return(htmlTextData);\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    if (!activeTexture)\n      return;\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      if (activeTexture.texture) {\n        this._cleanUp(activeTexture);\n      } else {\n        activeTexture.promise.then((texture) => {\n          activeTexture.texture = texture;\n          this._cleanUp(activeTexture);\n        }).catch(() => {\n          warn(\"HTMLTextSystem: Failed to clean texture\");\n        });\n      }\n      this._activeTextures[textKey] = null;\n    }\n  }\n  _cleanUp(activeTexture) {\n    TexturePool.returnTexture(activeTexture.texture);\n    activeTexture.texture.source.resource = null;\n    activeTexture.texture.source.uploadMethodId = \"unknown\";\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nHTMLTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"htmlText\"\n};\nHTMLTextSystem.defaultFontOptions = {\n  fontFamily: \"Arial\",\n  fontStyle: \"normal\",\n  fontWeight: \"normal\"\n};\n\nexport { HTMLTextSystem };\n//# sourceMappingURL=HTMLTextSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { updateQuadBounds } from '../../../utils/data/updateQuadBounds.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass CanvasTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const newKey = text._getKey();\n    if (gpuText.currentKey !== newKey) {\n      const { width, height } = this._renderer.canvasText.getTextureSize(\n        text.text,\n        text.resolution,\n        text._style\n      );\n      if (\n        // is only being used by this text:\n        this._renderer.canvasText.getReferenceCount(gpuText.currentKey) === 1 && width === gpuText.texture._source.width && height === gpuText.texture._source.height\n      ) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }\n  addRenderable(text, _instructionSet) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite);\n  }\n  updateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    batchableSprite.batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(text) {\n    this._destroyRenderableById(text.uid);\n  }\n  _destroyRenderableById(textUid) {\n    const gpuText = this._gpuText[textUid];\n    this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[textUid] = null;\n  }\n  _updateText(text) {\n    const newKey = text._getKey();\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(text);\n    }\n    text._didTextUpdate = false;\n    const padding = text._style.padding;\n    updateQuadBounds(batchableSprite.bounds, text._anchor, batchableSprite.texture, padding);\n  }\n  _updateGpuText(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.texture) {\n      this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    }\n    gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n    gpuText.currentKey = text._getKey();\n    batchableSprite.texture = gpuText.texture;\n  }\n  _getGpuText(text) {\n    return this._gpuText[text.uid] || this.initGpuText(text);\n  }\n  initGpuText(text) {\n    const gpuTextData = {\n      texture: null,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite)\n    };\n    gpuTextData.batchableSprite.renderable = text;\n    gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    gpuTextData.batchableSprite.roundPixels = this._renderer._roundPixels | text._roundPixels;\n    this._gpuText[text.uid] = gpuTextData;\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    this._updateText(text);\n    text.on(\"destroyed\", () => {\n      this.destroyRenderable(text);\n    });\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"text\"\n};\n\nexport { CanvasTextPipe };\n//# sourceMappingURL=CanvasTextPipe.mjs.map\n","import { Rectangle } from '../../maths/shapes/Rectangle.mjs';\n\n\"use strict\";\nfunction checkRow(data, width, y) {\n  for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction checkColumn(data, width, x, top, bottom) {\n  const stride = 4 * width;\n  for (let y = top, index = top * stride + 4 * x; y <= bottom; ++y, index += stride) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction getCanvasBoundingBox(canvas, resolution = 1) {\n  const { width, height } = canvas;\n  const context = canvas.getContext(\"2d\", {\n    willReadFrequently: true\n  });\n  if (context === null) {\n    throw new TypeError(\"Failed to get canvas 2D context\");\n  }\n  const imageData = context.getImageData(0, 0, width, height);\n  const data = imageData.data;\n  let left = 0;\n  let top = 0;\n  let right = width - 1;\n  let bottom = height - 1;\n  while (top < height && checkRow(data, width, top))\n    ++top;\n  if (top === height)\n    return Rectangle.EMPTY;\n  while (checkRow(data, width, bottom))\n    --bottom;\n  while (checkColumn(data, width, left, top, bottom))\n    ++left;\n  while (checkColumn(data, width, right, top, bottom))\n    --right;\n  ++right;\n  ++bottom;\n  return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n\nexport { getCanvasBoundingBox };\n//# sourceMappingURL=getCanvasBoundingBox.mjs.map\n","import { Color } from '../../../color/Color.mjs';\nimport { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { nextPow2 } from '../../../maths/misc/pow2.mjs';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox.mjs';\nimport { deprecation } from '../../../utils/logging/deprecation.mjs';\nimport { TextStyle } from '../TextStyle.mjs';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource.mjs';\nimport { CanvasTextMetrics } from './CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle.mjs';\n\n\"use strict\";\nclass CanvasTextSystem {\n  constructor(_renderer) {\n    this._activeTextures = {};\n    this._renderer = _renderer;\n  }\n  getTextureSize(text, resolution, style) {\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    let width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    let height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    width = Math.ceil(width - 1e-6);\n    height = Math.ceil(height - 1e-6);\n    width = nextPow2(width);\n    height = nextPow2(height);\n    return { width, height };\n  }\n  getTexture(options, resolution, style, _textKey) {\n    if (typeof options === \"string\") {\n      deprecation(\"8.0.0\", \"CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments\");\n      options = {\n        text: options,\n        style,\n        resolution\n      };\n    }\n    if (!(options.style instanceof TextStyle)) {\n      options.style = new TextStyle(options.style);\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(\n      options\n    );\n    this._renderer.texture.initSource(texture._source);\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n    return texture;\n  }\n  createTextureAndCanvas(options) {\n    const { text, style } = options;\n    const resolution = options.resolution ?? this._renderer.resolution;\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n    const { canvas } = canvasAndContext;\n    this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n    const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n    if (style.trim) {\n      const trimmed = getCanvasBoundingBox(canvas, resolution);\n      texture.frame.copyFrom(trimmed);\n      texture.updateUvs();\n    }\n    return { texture, canvasAndContext };\n  }\n  getManagedTexture(text) {\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    const textKey = text._getKey();\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].texture;\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n    this._activeTextures[textKey] = {\n      canvasAndContext,\n      texture,\n      usageCount: 1\n    };\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n      TexturePool.returnTexture(activeTexture.texture);\n      const source = activeTexture.texture.source;\n      source.resource = null;\n      source.uploadMethodId = \"unknown\";\n      source.alphaMode = \"no-premultiply-alpha\";\n      this._activeTextures[textKey] = null;\n    }\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   *\n   * By default this is used internally to ensure the texture is correct before rendering,\n   * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n   * and then shared across multiple Sprites.\n   * @param text\n   * @param style\n   * @param resolution\n   * @param canvasAndContext\n   */\n  renderTextToCanvas(text, style, resolution, canvasAndContext) {\n    const { canvas, context } = canvasAndContext;\n    const font = fontStringFromTextStyle(style);\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const lines = measured.lines;\n    const lineHeight = measured.lineHeight;\n    const lineWidths = measured.lineWidths;\n    const maxLineWidth = measured.maxLineWidth;\n    const fontProperties = measured.fontProperties;\n    const height = canvas.height;\n    context.resetTransform();\n    context.scale(resolution, resolution);\n    const padding = style.padding * 2;\n    context.clearRect(0, 0, measured.width + 4 + padding, measured.height + 4 + padding);\n    if (style._stroke?.width) {\n      const strokeStyle = style._stroke;\n      context.lineWidth = strokeStyle.width;\n      context.miterLimit = strokeStyle.miterLimit;\n      context.lineJoin = strokeStyle.join;\n      context.lineCap = strokeStyle.cap;\n    }\n    context.font = font;\n    let linePositionX;\n    let linePositionY;\n    const passesCount = style.dropShadow ? 2 : 1;\n    for (let i = 0; i < passesCount; ++i) {\n      const isShadowPass = style.dropShadow && i === 0;\n      const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + style.padding * 2) : 0;\n      const dsOffsetShadow = dsOffsetText * resolution;\n      if (isShadowPass) {\n        context.fillStyle = \"black\";\n        context.strokeStyle = \"black\";\n        const shadowOptions = style.dropShadow;\n        const dropShadowColor = shadowOptions.color;\n        const dropShadowAlpha = shadowOptions.alpha;\n        context.shadowColor = Color.shared.setValue(dropShadowColor).setAlpha(dropShadowAlpha).toRgbaString();\n        const dropShadowBlur = shadowOptions.blur * resolution;\n        const dropShadowDistance = shadowOptions.distance * resolution;\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance + dsOffsetShadow;\n      } else {\n        context.globalAlpha = style._fill?.alpha ?? 1;\n        context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context) : null;\n        if (style._stroke?.width) {\n          context.strokeStyle = getCanvasFillStyle(style._stroke, context);\n        }\n        context.shadowColor = \"black\";\n      }\n      let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n      if (lineHeight - fontProperties.fontSize < 0) {\n        linePositionYShift = 0;\n      }\n      const strokeWidth = style._stroke?.width ?? 0;\n      for (let i2 = 0; i2 < lines.length; i2++) {\n        linePositionX = strokeWidth / 2;\n        linePositionY = strokeWidth / 2 + i2 * lineHeight + fontProperties.ascent + linePositionYShift;\n        if (style.align === \"right\") {\n          linePositionX += maxLineWidth - lineWidths[i2];\n        } else if (style.align === \"center\") {\n          linePositionX += (maxLineWidth - lineWidths[i2]) / 2;\n        }\n        if (style._stroke?.width) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText,\n            true\n          );\n        }\n        if (style._fill !== void 0) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText\n          );\n        }\n      }\n    }\n  }\n  /**\n   * Render the text with letter-spacing.\n   * @param text - The text to draw\n   * @param style\n   * @param canvasAndContext\n   * @param x - Horizontal position to draw the text\n   * @param y - Vertical position to draw the text\n   * @param isStroke - Is this drawing for the outside stroke of the\n   *  text? If not, it's for the inside fill\n   */\n  _drawLetterSpacing(text, style, canvasAndContext, x, y, isStroke = false) {\n    const { context } = canvasAndContext;\n    const letterSpacing = style.letterSpacing;\n    let useExperimentalLetterSpacing = false;\n    if (CanvasTextMetrics.experimentalLetterSpacingSupported) {\n      if (CanvasTextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    if (letterSpacing === 0 || useExperimentalLetterSpacing) {\n      if (isStroke) {\n        context.strokeText(text, x, y);\n      } else {\n        context.fillText(text, x, y);\n      }\n      return;\n    }\n    let currentPosition = x;\n    const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n    let previousWidth = context.measureText(text).width;\n    let currentWidth = 0;\n    for (let i = 0; i < stringArray.length; ++i) {\n      const currentChar = stringArray[i];\n      if (isStroke) {\n        context.strokeText(currentChar, currentPosition, y);\n      } else {\n        context.fillText(currentChar, currentPosition, y);\n      }\n      let textStr = \"\";\n      for (let j = i + 1; j < stringArray.length; ++j) {\n        textStr += stringArray[j];\n      }\n      currentWidth = context.measureText(textStr).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nCanvasTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"canvasText\"\n};\n\nexport { CanvasTextSystem };\n//# sourceMappingURL=CanvasTextSystem.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { ResizePlugin } from './ResizePlugin.mjs';\nimport { TickerPlugin } from './TickerPlugin.mjs';\n\n\"use strict\";\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem.mjs';\nimport { GraphicsPipe } from './shared/GraphicsPipe.mjs';\n\n\"use strict\";\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { MeshPipe } from './shared/MeshPipe.mjs';\n\n\"use strict\";\nextensions.add(MeshPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe.mjs';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem.mjs';\n\n\"use strict\";\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { BitmapTextPipe } from './BitmapTextPipe.mjs';\n\n\"use strict\";\nextensions.add(BitmapTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { HTMLTextPipe } from './HTMLTextPipe.mjs';\nimport { HTMLTextSystem } from './HTMLTextSystem.mjs';\n\n\"use strict\";\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { TilingSpritePipe } from './TilingSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(TilingSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(NineSliceSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { FilterPipe } from './FilterPipe.mjs';\nimport { FilterSystem } from './FilterSystem.mjs';\n\n\"use strict\";\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n//# sourceMappingURL=init.mjs.map\n"],"names":["ResizePlugin","options","dom","width","height","clientWidth","clientHeight","ExtensionType","TickerPlugin","ticker","UPDATE_PRIORITY","Ticker","oldTicker","FilterPipe","renderer","filterEffect","container","instructionSet","_filterEffect","_container","instruction","tempMatrix","Matrix","getFastGlobalBounds","target","bounds","_getGlobalBoundsRecursive","manageEffects","localBounds","boundsPool","viewBounds","children","i","advanced","getGlobalRenderableBounds","renderables","renderable","quadGeometry","Geometry","FilterSystem","UniformGroup","BindGroup","filters","filterData","colorTextureSource","resolution","padding","antialias","blendRequired","enabled","filter","warn","viewPort","TexturePool","inputTexture","backTexture","Texture","previousBounds","renderTarget","flip","flop","t","lastRenderSurface","backgroundResolution","x","y","input","output","clear","offset","Point","isFinalTarget","currentIndex","filterUniforms","uniforms","outputFrame","inputSize","inputPixel","inputClamp","globalFrame","outputTexture","lastIndex","filterData2","rootTexture","batchUniforms","RendererType","Bounds","outputMatrix","sprite","data","mappedMatrix","worldTransform","_MeshGeometry","args","deprecation","v8_0_0","positions","uvs","indices","shrinkToFit","positionBuffer","Buffer","BufferUsage","uvBuffer","indexBuffer","value","MeshGeometry","textStyleToCSS","style","stroke","fill","cssStyles","Color","strokeToCSS","dropShadowToCSS","tagStyleToCSS","dropShadowStyle","color","position","templates","transform","tagStyles","out","tagStyle","cssTagStyle","j","HTMLTextStyle","TextStyle","generateTextStyleKey","toAdd","v","toRemove","nssvg","nsxhtml","HTMLTextRenderData","foreignObject","svgRoot","styleElement","domElement","tempHTMLTextRenderData","measureHtmlText","text","fontStyleCSS","htmlTextRenderData","contentBounds","descenderPadding","CanvasTextMetrics","GraphicsPipe","adaptor","State","graphics","context","wasBatched","gpuContext","batches","batch","shader","localUniforms","color32BitToUniform","batchPipe","roundPixels","batchClone","BigPool","BatchableGraphics","graphicsUid","_PlaneGeometry","total","verts","verticesX","verticesY","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","PlaneGeometry","BatchableMesh","index","indicesOffset","float32View","uint32View","textureId","mesh","geometry","wt","textureIdAndRound","a","b","c","d","tx","ty","transformedUvs","textureMatrix","abgr","MeshPipe","meshData","isBatched","batchableMesh","texture","batcher","batched","gpuBatchableMesh","gpuMesh","getAdjustedBlendModeBlend","_NineSliceGeometry","w","scaleW","h","scaleH","scale","_uvw","_uvh","NineSliceGeometry","NineSliceSpritePipe","_instructionSet","gpuSprite","batchableSprite","tilingBit","tilingBitGl","gpuProgram","glProgram","TilingSpriteShader","Shader","compileHighShaderGpuProgram","localUniformBit","roundPixelsBit","compileHighShaderGlProgram","localUniformBitGl","roundPixelsBitGl","tilingUniforms","matrix","anchorX","anchorY","textureWidth","textureHeight","uTextureTransform","QuadGeometry","setPositions","tilingSprite","applyMatrix","array","stride","size","setUvs","sharedQuad","TilingSpritePipe","tilingSpriteData","couldBatch","canBatch","renderableData","_nonPowOf2wrapping","localUniformMSDFBit","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","maxTextures","getMaxTexturesPerBatch","colorBit","generateTextureBatchBit","colorBitGl","generateTextureBatchBitGl","getBatchSamplersUniformGroup","BitmapTextPipe","bitmapText","graphicsRenderable","syncWithProxy","renderableUid","proxyGraphics","bitmapFont","BitmapFontManager","chars","currentY","bitmapTextLayout","getBitmapTextLayout","tint","line","char","charData","proxyRenderable","Graphics","fontFamily","dynamicFont","Cache","dx","dy","worldScale","fontScale","distance","uid","proxy","HTMLTextPipe","htmlText","gpuText","newKey","htmlTextUid","e","updateQuadBounds","gpuTextData","BatchableSprite","isSafari","userAgent","DOMAdapter","tempBounds","getPo2TextureFromSource","image","extractFontFamilies","fontFamilies","dedupe","regex","matches","addFontFamily","fontFamily2","match","loadFontAsBase64","url","blob","reader","resolve","reject","loadFontCSS","dataSrc","FontStylePromiseCache","getFontCss","defaultOptions","fontPromises","getSVGUrl","fontCSS","htmlTextData","getTemporaryCanvasFromImage","canvasAndContext","CanvasPool","loadSVGImage","delay","resolve2","HTMLTextSystem","textKey","promise","measured","svgURL","resource","activeTexture","CanvasTextPipe","textUid","checkRow","checkColumn","top","bottom","getCanvasBoundingBox","canvas","left","right","Rectangle","CanvasTextSystem","_renderer","nextPow2","_textKey","trimmed","source","font","fontStringFromTextStyle","lines","lineHeight","lineWidths","maxLineWidth","fontProperties","strokeStyle","linePositionX","linePositionY","passesCount","isShadowPass","dsOffsetText","dsOffsetShadow","shadowOptions","dropShadowColor","dropShadowAlpha","dropShadowBlur","dropShadowDistance","getCanvasFillStyle","linePositionYShift","strokeWidth","i2","isStroke","letterSpacing","useExperimentalLetterSpacing","currentPosition","stringArray","previousWidth","currentWidth","currentChar","textStr","extensions","GraphicsContextSystem"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]}