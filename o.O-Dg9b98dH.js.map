{"version":3,"file":"o.O-Dg9b98dH.js","sources":["../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/filters/mask/mask.frag.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/filters/mask/mask.vert.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/filters/mask/mask.wgsl.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/filters/mask/MaskFilter.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/batcher/shared/BatcherPipe.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/high-shader/shader-bits/textureBit.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/container/utils/buildInstructions.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/mask/alpha/AlphaMaskPipe.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/mask/color/ColorMaskPipe.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/mask/stencil/StencilMaskPipe.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/ensureAttributes.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/gpu/state/GpuStencilModesToPixi.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/shader/UboSystem.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uniformParsers.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/createUboSyncFunction.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uboSyncFunctions.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/calculateProjection.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/texture/utils/getCanvasTexture.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/isRenderingToScreen.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTarget.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTargetSystem.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/buffer/BufferResource.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/container/CustomRenderPipe.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/container/utils/executeInstructions.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/container/RenderGroupPipe.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/container/utils/collectRenderGroups.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/container/utils/mixHexColors.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/container/utils/mixColors.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/container/utils/updateRenderGroupTransforms.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/container/utils/validateRenderables.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/container/RenderGroupSystem.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/scene/sprite/SpritePipe.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/background/BackgroundSystem.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/blendModes/BlendModePipe.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/extract/ExtractSystem.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/texture/RenderTexture.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/extract/GenerateTextureSystem.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/GlobalUniformSystem.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/utils/sayHello.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/startup/HelloSystem.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureGCSystem.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/view/ViewSystem.mjs","../node_modules/.pnpm/pixi.js@8.2.1/node_modules/pixi.js/lib/rendering/renderers/shared/system/SharedSystems.mjs"],"sourcesContent":["var fragment = \"in vec2 vMaskCoord;\\nin vec2 vTextureCoord;\\n\\nuniform sampler2D uTexture;\\nuniform sampler2D uMaskTexture;\\n\\nuniform float uAlpha;\\nuniform vec4 uMaskClamp;\\n\\nout vec4 finalColor;\\n\\nvoid main(void)\\n{\\n    float clip = step(3.5,\\n        step(uMaskClamp.x, vMaskCoord.x) +\\n        step(uMaskClamp.y, vMaskCoord.y) +\\n        step(vMaskCoord.x, uMaskClamp.z) +\\n        step(vMaskCoord.y, uMaskClamp.w));\\n\\n    // TODO look into why this is needed\\n    float npmAlpha = uAlpha; \\n    vec4 original = texture(uTexture, vTextureCoord);\\n    vec4 masky = texture(uMaskTexture, vMaskCoord);\\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\\n\\n    original *= (alphaMul * masky.r * uAlpha * clip);\\n\\n    finalColor = original;\\n}\\n\";\n\nexport { fragment as default };\n//# sourceMappingURL=mask.frag.mjs.map\n","var vertex = \"in vec2 aPosition;\\n\\nout vec2 vTextureCoord;\\nout vec2 vMaskCoord;\\n\\n\\nuniform vec4 uInputSize;\\nuniform vec4 uOutputFrame;\\nuniform vec4 uOutputTexture;\\nuniform mat3 uFilterMatrix;\\n\\nvec4 filterVertexPosition(  vec2 aPosition )\\n{\\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\\n       \\n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nvec2 filterTextureCoord(  vec2 aPosition )\\n{\\n    return aPosition * (uOutputFrame.zw * uInputSize.zw);\\n}\\n\\nvec2 getFilterCoord( vec2 aPosition )\\n{\\n    return  ( uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}   \\n\\nvoid main(void)\\n{\\n    gl_Position = filterVertexPosition(aPosition);\\n    vTextureCoord = filterTextureCoord(aPosition);\\n    vMaskCoord = getFilterCoord(aPosition);\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=mask.vert.mjs.map\n","var source = \"struct GlobalFilterUniforms {\\n  uInputSize:vec4<f32>,\\n  uInputPixel:vec4<f32>,\\n  uInputClamp:vec4<f32>,\\n  uOutputFrame:vec4<f32>,\\n  uGlobalFrame:vec4<f32>,\\n  uOutputTexture:vec4<f32>,  \\n};\\n\\nstruct MaskUniforms {\\n  uFilterMatrix:mat3x3<f32>,\\n  uMaskClamp:vec4<f32>,\\n  uAlpha:f32,\\n};\\n\\n\\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\\n@group(0) @binding(1) var uTexture: texture_2d<f32>;\\n@group(0) @binding(2) var uSampler : sampler;\\n\\n@group(1) @binding(0) var<uniform> filterUniforms : MaskUniforms;\\n@group(1) @binding(1) var uMaskTexture: texture_2d<f32>;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) filterUv : vec2<f32>,\\n  };\\n\\nfn filterVertexPosition(aPosition:vec2<f32>) -> vec4<f32>\\n{\\n    var position = aPosition * gfu.uOutputFrame.zw + gfu.uOutputFrame.xy;\\n\\n    position.x = position.x * (2.0 / gfu.uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*gfu.uOutputTexture.z / gfu.uOutputTexture.y) - gfu.uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nfn filterTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n    return aPosition * (gfu.uOutputFrame.zw * gfu.uInputSize.zw);\\n}\\n\\nfn globalTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return  (aPosition.xy / gfu.uGlobalFrame.zw) + (gfu.uGlobalFrame.xy / gfu.uGlobalFrame.zw);  \\n}\\n\\nfn getFilterCoord(aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return ( filterUniforms.uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}\\n\\nfn getSize() -> vec2<f32>\\n{\\n\\n  \\n  return gfu.uGlobalFrame.zw;\\n}\\n  \\n@vertex\\nfn mainVertex(\\n  @location(0) aPosition : vec2<f32>, \\n) -> VSOutput {\\n  return VSOutput(\\n   filterVertexPosition(aPosition),\\n   filterTextureCoord(aPosition),\\n   getFilterCoord(aPosition)\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) filterUv: vec2<f32>,\\n  @builtin(position) position: vec4<f32>\\n) -> @location(0) vec4<f32> {\\n\\n    var maskClamp = filterUniforms.uMaskClamp;\\n\\n     var clip = step(3.5,\\n        step(maskClamp.x, filterUv.x) +\\n        step(maskClamp.y, filterUv.y) +\\n        step(filterUv.x, maskClamp.z) +\\n        step(filterUv.y, maskClamp.w));\\n\\n    var mask = textureSample(uMaskTexture, uSampler, filterUv);\\n    var source = textureSample(uTexture, uSampler, uv);\\n    \\n    var npmAlpha = 0.0;\\n\\n    var alphaMul = 1.0 - npmAlpha * (1.0 - mask.a);\\n\\n    var a = (alphaMul * mask.r) * clip;\\n\\n    return vec4(source.rgb, source.a) * a;\\n}\";\n\nexport { source as default };\n//# sourceMappingURL=mask.wgsl.mjs.map\n","import { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { TextureMatrix } from '../../rendering/renderers/shared/texture/TextureMatrix.mjs';\nimport { Filter } from '../Filter.mjs';\nimport fragment from './mask.frag.mjs';\nimport vertex from './mask.vert.mjs';\nimport source from './mask.wgsl.mjs';\n\n\"use strict\";\nclass MaskFilter extends Filter {\n  constructor(options) {\n    const { sprite, ...rest } = options;\n    const textureMatrix = new TextureMatrix(sprite.texture);\n    const filterUniforms = new UniformGroup({\n      uFilterMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uMaskClamp: { value: textureMatrix.uClampFrame, type: \"vec4<f32>\" },\n      uAlpha: { value: 1, type: \"f32\" }\n    });\n    const gpuProgram = GpuProgram.from({\n      vertex: {\n        source,\n        entryPoint: \"mainVertex\"\n      },\n      fragment: {\n        source,\n        entryPoint: \"mainFragment\"\n      }\n    });\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment,\n      name: \"mask-filter\"\n    });\n    super({\n      ...rest,\n      gpuProgram,\n      glProgram,\n      resources: {\n        filterUniforms,\n        uMaskTexture: sprite.texture.source\n      }\n    });\n    this.sprite = sprite;\n    this._textureMatrix = textureMatrix;\n  }\n  apply(filterManager, input, output, clearMode) {\n    this._textureMatrix.texture = this.sprite.texture;\n    filterManager.calculateSpriteMatrix(\n      this.resources.filterUniforms.uniforms.uFilterMatrix,\n      this.sprite\n    ).prepend(this._textureMatrix.mapCoord);\n    this.resources.uMaskTexture = this.sprite.texture.source;\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n}\n\nexport { MaskFilter };\n//# sourceMappingURL=MaskFilter.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../renderers/shared/state/State.mjs';\nimport { BatchGeometry } from '../gpu/BatchGeometry.mjs';\nimport { Batcher } from './Batcher.mjs';\n\n\"use strict\";\nclass BatcherPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this._batches = /* @__PURE__ */ Object.create(null);\n    this._geometries = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init(this);\n  }\n  buildStart(instructionSet) {\n    if (!this._batches[instructionSet.uid]) {\n      const batcher = new Batcher();\n      this._batches[instructionSet.uid] = batcher;\n      this._geometries[batcher.uid] = new BatchGeometry();\n    }\n    this._activeBatch = this._batches[instructionSet.uid];\n    this._activeGeometry = this._geometries[this._activeBatch.uid];\n    this._activeBatch.begin();\n  }\n  addToBatch(batchableObject) {\n    this._activeBatch.add(batchableObject);\n  }\n  break(instructionSet) {\n    this._activeBatch.break(instructionSet);\n  }\n  buildEnd(instructionSet) {\n    const activeBatch = this._activeBatch;\n    const geometry = this._activeGeometry;\n    activeBatch.finish(instructionSet);\n    geometry.indexBuffer.setDataWithSize(activeBatch.indexBuffer, activeBatch.indexSize, true);\n    geometry.buffers[0].setDataWithSize(activeBatch.attributeBuffer.float32View, activeBatch.attributeSize, false);\n  }\n  upload(instructionSet) {\n    const batcher = this._batches[instructionSet.uid];\n    const geometry = this._geometries[batcher.uid];\n    if (batcher.dirty) {\n      batcher.dirty = false;\n      geometry.buffers[0].update(batcher.attributeSize * 4);\n    }\n  }\n  execute(batch) {\n    if (batch.action === \"startBatch\") {\n      const batcher = batch.batcher;\n      const geometry = this._geometries[batcher.uid];\n      this._adaptor.start(this, geometry);\n    }\n    this._adaptor.execute(this, batch);\n  }\n  destroy() {\n    this.state = null;\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    for (const i in this._batches) {\n      this._batches[i].destroy();\n    }\n    this._batches = null;\n    for (const i in this._geometries) {\n      this._geometries[i].destroy();\n    }\n    this._geometries = null;\n  }\n}\n/** @ignore */\nBatcherPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"batch\"\n};\n\nexport { BatcherPipe };\n//# sourceMappingURL=BatcherPipe.mjs.map\n","\"use strict\";\nconst textureBit = {\n  name: \"texture-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n         \n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            outColor = textureSample(uTexture, uSampler, vUV);\n        `\n    )\n  }\n};\nconst textureBitGl = {\n  name: \"texture-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureMatrix;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n        uniform sampler2D uTexture;\n\n         \n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            outColor = texture(uTexture, vUV);\n        `\n    )\n  }\n};\n\nexport { textureBit, textureBitGl };\n//# sourceMappingURL=textureBit.mjs.map\n","\"use strict\";\nfunction buildInstructions(renderGroup, renderPipes) {\n  const root = renderGroup.root;\n  const instructionSet = renderGroup.instructionSet;\n  instructionSet.reset();\n  renderPipes.batch.buildStart(instructionSet);\n  renderPipes.blendMode.buildStart();\n  renderPipes.colorMask.buildStart();\n  if (root.sortableChildren) {\n    root.sortChildren();\n  }\n  collectAllRenderablesAdvanced(root, instructionSet, renderPipes, true);\n  renderPipes.batch.buildEnd(instructionSet);\n  renderPipes.blendMode.buildEnd(instructionSet);\n}\nfunction collectAllRenderables(container, instructionSet, rendererPipes) {\n  if (container.globalDisplayStatus < 7 || !container.includeInBuild)\n    return;\n  if (container.sortableChildren) {\n    container.sortChildren();\n  }\n  if (container.isSimple) {\n    collectAllRenderablesSimple(container, instructionSet, rendererPipes);\n  } else {\n    collectAllRenderablesAdvanced(container, instructionSet, rendererPipes, false);\n  }\n}\nfunction collectAllRenderablesSimple(container, instructionSet, renderPipes) {\n  if (container.renderPipeId) {\n    renderPipes.blendMode.setBlendMode(container, container.groupBlendMode, instructionSet);\n    container.didViewUpdate = false;\n    const rp = renderPipes;\n    rp[container.renderPipeId].addRenderable(container, instructionSet);\n  }\n  if (!container.renderGroup) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      collectAllRenderables(children[i], instructionSet, renderPipes);\n    }\n  }\n}\nfunction collectAllRenderablesAdvanced(container, instructionSet, renderPipes, isRoot) {\n  if (!isRoot && container.renderGroup) {\n    renderPipes.renderGroup.addRenderGroup(container.renderGroup, instructionSet);\n  } else {\n    for (let i = 0; i < container.effects.length; i++) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.push(effect, container, instructionSet);\n    }\n    const renderPipeId = container.renderPipeId;\n    if (renderPipeId) {\n      renderPipes.blendMode.setBlendMode(container, container.groupBlendMode, instructionSet);\n      container.didViewUpdate = false;\n      const pipe = renderPipes[renderPipeId];\n      pipe.addRenderable(container, instructionSet);\n    }\n    const children = container.children;\n    if (children.length) {\n      for (let i = 0; i < children.length; i++) {\n        collectAllRenderables(children[i], instructionSet, renderPipes);\n      }\n    }\n    for (let i = container.effects.length - 1; i >= 0; i--) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.pop(effect, container, instructionSet);\n    }\n  }\n}\n\nexport { buildInstructions, collectAllRenderables };\n//# sourceMappingURL=buildInstructions.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { FilterEffect } from '../../../filters/FilterEffect.mjs';\nimport { MaskFilter } from '../../../filters/mask/MaskFilter.mjs';\nimport { Bounds } from '../../../scene/container/bounds/Bounds.mjs';\nimport { getGlobalBounds } from '../../../scene/container/bounds/getGlobalBounds.mjs';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions.mjs';\nimport { Sprite } from '../../../scene/sprite/Sprite.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { Texture } from '../../renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../../renderers/shared/texture/TexturePool.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nclass AlphaMaskEffect extends FilterEffect {\n  constructor() {\n    super();\n    this.filters = [new MaskFilter({\n      sprite: new Sprite(Texture.EMPTY)\n    })];\n  }\n  get sprite() {\n    return this.filters[0].sprite;\n  }\n  set sprite(value) {\n    this.filters[0].sprite = value;\n  }\n}\nclass AlphaMaskPipe {\n  constructor(renderer) {\n    this._activeMaskStage = [];\n    this._renderer = renderer;\n  }\n  push(mask, maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"pushMaskBegin\",\n      mask,\n      canBundle: false,\n      maskedContainer\n    });\n    if (mask.renderMaskToTexture) {\n      const maskContainer = mask.mask;\n      maskContainer.includeInBuild = true;\n      collectAllRenderables(\n        maskContainer,\n        instructionSet,\n        renderer.renderPipes\n      );\n      maskContainer.includeInBuild = false;\n    }\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"pushMaskEnd\",\n      mask,\n      maskedContainer,\n      canBundle: false\n    });\n  }\n  pop(mask, _maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"popMaskEnd\",\n      mask,\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    const renderMask = instruction.mask.renderMaskToTexture;\n    if (instruction.action === \"pushMaskBegin\") {\n      const filterEffect = BigPool.get(AlphaMaskEffect);\n      if (renderMask) {\n        instruction.mask.mask.measurable = true;\n        const bounds = getGlobalBounds(instruction.mask.mask, true, tempBounds);\n        instruction.mask.mask.measurable = false;\n        bounds.ceil();\n        const filterTexture = TexturePool.getOptimalTexture(\n          bounds.width,\n          bounds.height,\n          1,\n          false\n        );\n        renderer.renderTarget.push(filterTexture, true);\n        renderer.globalUniforms.push({\n          offset: bounds,\n          worldColor: 4294967295\n        });\n        const sprite = filterEffect.sprite;\n        sprite.texture = filterTexture;\n        sprite.worldTransform.tx = bounds.minX;\n        sprite.worldTransform.ty = bounds.minY;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer,\n          filterTexture\n        });\n      } else {\n        filterEffect.sprite = instruction.mask.mask;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer\n        });\n      }\n    } else if (instruction.action === \"pushMaskEnd\") {\n      const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n      if (renderMask) {\n        renderer.renderTarget.pop();\n        renderer.globalUniforms.pop();\n      }\n      renderer.filter.push({\n        renderPipeId: \"filter\",\n        action: \"pushFilter\",\n        container: maskData.maskedContainer,\n        filterEffect: maskData.filterEffect,\n        canBundle: false\n      });\n    } else if (instruction.action === \"popMaskEnd\") {\n      renderer.filter.pop();\n      const maskData = this._activeMaskStage.pop();\n      if (renderMask) {\n        TexturePool.returnTexture(maskData.filterTexture);\n      }\n      BigPool.return(maskData.filterEffect);\n    }\n  }\n  destroy() {\n    this._renderer = null;\n    this._activeMaskStage = null;\n  }\n}\n/** @ignore */\nAlphaMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"alphaMask\"\n};\n\nexport { AlphaMaskPipe };\n//# sourceMappingURL=AlphaMaskPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ColorMaskPipe {\n  constructor(renderer) {\n    this._colorStack = [];\n    this._colorStackIndex = 0;\n    this._currentColor = 0;\n    this._renderer = renderer;\n  }\n  buildStart() {\n    this._colorStack[0] = 15;\n    this._colorStackIndex = 1;\n    this._currentColor = 15;\n  }\n  push(mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & mask.mask;\n    const currentColor = this._colorStack[this._colorStackIndex];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: \"colorMask\",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n    this._colorStackIndex++;\n  }\n  pop(_mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    this._colorStackIndex--;\n    const currentColor = colorStack[this._colorStackIndex - 1];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: \"colorMask\",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    renderer.colorMask.setMask(instruction.colorMask);\n  }\n  destroy() {\n    this._colorStack = null;\n  }\n}\n/** @ignore */\nColorMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"colorMask\"\n};\n\nexport { ColorMaskPipe };\n//# sourceMappingURL=ColorMaskPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions.mjs';\nimport { CLEAR } from '../../renderers/gl/const.mjs';\nimport { STENCIL_MODES } from '../../renderers/shared/state/const.mjs';\n\n\"use strict\";\nclass StencilMaskPipe {\n  constructor(renderer) {\n    // used when building and also when executing..\n    this._maskStackHash = {};\n    this._maskHash = /* @__PURE__ */ new WeakMap();\n    this._renderer = renderer;\n  }\n  push(mask, _container, instructionSet) {\n    var _a;\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, \"none\", instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"pushMaskBegin\",\n      mask,\n      canBundle: false\n    });\n    const maskContainer = effect.mask;\n    maskContainer.includeInBuild = true;\n    if (!this._maskHash.has(effect)) {\n      this._maskHash.set(effect, {\n        instructionsStart: 0,\n        instructionsLength: 0\n      });\n    }\n    const maskData = this._maskHash.get(effect);\n    maskData.instructionsStart = instructionSet.instructionSize;\n    collectAllRenderables(\n      maskContainer,\n      instructionSet,\n      renderer.renderPipes\n    );\n    maskContainer.includeInBuild = false;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"pushMaskEnd\",\n      mask,\n      canBundle: false\n    });\n    const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n    maskData.instructionsLength = instructionsLength;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n  }\n  pop(mask, _container, instructionSet) {\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, \"none\", instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"popMaskBegin\",\n      canBundle: false\n    });\n    const maskData = this._maskHash.get(mask);\n    for (let i = 0; i < maskData.instructionsLength; i++) {\n      instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n    }\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"popMaskEnd\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    var _a;\n    const renderer = this._renderer;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    let maskStackIndex = (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n    if (instruction.action === \"pushMaskBegin\") {\n      renderer.renderTarget.ensureDepthStencil();\n      renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_ADD, maskStackIndex);\n      maskStackIndex++;\n      renderer.colorMask.setMask(0);\n    } else if (instruction.action === \"pushMaskEnd\") {\n      renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n      renderer.colorMask.setMask(15);\n    } else if (instruction.action === \"popMaskBegin\") {\n      renderer.colorMask.setMask(0);\n      if (maskStackIndex !== 0) {\n        renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_REMOVE, maskStackIndex);\n      } else {\n        renderer.renderTarget.clear(null, CLEAR.STENCIL);\n        renderer.stencil.setStencilMode(STENCIL_MODES.DISABLED, maskStackIndex);\n      }\n      maskStackIndex--;\n    } else if (instruction.action === \"popMaskEnd\") {\n      renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n      renderer.colorMask.setMask(15);\n    }\n    this._maskStackHash[renderTargetUid] = maskStackIndex;\n  }\n  destroy() {\n    this._renderer = null;\n    this._maskStackHash = null;\n    this._maskHash = null;\n  }\n}\nStencilMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"stencilMask\"\n};\n\nexport { StencilMaskPipe };\n//# sourceMappingURL=StencilMaskPipe.mjs.map\n","import { warn } from '../../../../../utils/logging/warn.mjs';\nimport { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction ensureAttributes(geometry, extractedData) {\n  for (const i in geometry.attributes) {\n    const attribute = geometry.attributes[i];\n    const attributeData = extractedData[i];\n    if (attributeData) {\n      attribute.location ?? (attribute.location = attributeData.location);\n      attribute.format ?? (attribute.format = attributeData.format);\n      attribute.offset ?? (attribute.offset = attributeData.offset);\n      attribute.instance ?? (attribute.instance = attributeData.instance);\n    } else {\n      warn(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n    }\n  }\n  ensureStartAndStride(geometry);\n}\nfunction ensureStartAndStride(geometry) {\n  const { buffers, attributes } = geometry;\n  const tempStride = {};\n  const tempStart = {};\n  for (const j in buffers) {\n    const buffer = buffers[j];\n    tempStride[buffer.uid] = 0;\n    tempStart[buffer.uid] = 0;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    tempStride[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    attribute.stride ?? (attribute.stride = tempStride[attribute.buffer.uid]);\n    attribute.start ?? (attribute.start = tempStart[attribute.buffer.uid]);\n    tempStart[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n  }\n}\n\nexport { ensureAttributes };\n//# sourceMappingURL=ensureAttributes.mjs.map\n","import { STENCIL_MODES } from '../../shared/state/const.mjs';\n\n\"use strict\";\nconst GpuStencilModesToPixi = [];\nGpuStencilModesToPixi[STENCIL_MODES.NONE] = void 0;\nGpuStencilModesToPixi[STENCIL_MODES.DISABLED] = {\n  stencilWriteMask: 0,\n  stencilReadMask: 0\n};\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_ADD] = {\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"increment-clamp\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"increment-clamp\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_REMOVE] = {\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"decrement-clamp\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"decrement-clamp\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.MASK_ACTIVE] = {\n  stencilWriteMask: 0,\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"keep\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"keep\"\n  }\n};\n\nexport { GpuStencilModesToPixi };\n//# sourceMappingURL=GpuStencilModesToPixi.mjs.map\n","import { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported.mjs';\nimport { Buffer } from '../buffer/Buffer.mjs';\nimport { BufferUsage } from '../buffer/const.mjs';\n\n\"use strict\";\nclass UboSystem {\n  constructor(adaptor) {\n    /** Cache of uniform buffer layouts and sync functions, so we don't have to re-create them */\n    this._syncFunctionHash = /* @__PURE__ */ Object.create(null);\n    this._adaptor = adaptor;\n    this._systemCheck();\n  }\n  /**\n   * Overrideable function by `pixi.js/unsafe-eval` to silence\n   * throwing an error if platform doesn't support unsafe-evals.\n   * @private\n   */\n  _systemCheck() {\n    if (!unsafeEvalSupported()) {\n      throw new Error(\"Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.\");\n    }\n  }\n  ensureUniformGroup(uniformGroup) {\n    const uniformData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new Buffer({\n      data: new Float32Array(uniformData.layout.size / 4),\n      usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n    }));\n  }\n  getUniformGroupData(uniformGroup) {\n    return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n  }\n  _initUniformGroup(uniformGroup) {\n    const uniformGroupSignature = uniformGroup._signature;\n    let uniformData = this._syncFunctionHash[uniformGroupSignature];\n    if (!uniformData) {\n      const elements = Object.keys(uniformGroup.uniformStructures).map((i) => uniformGroup.uniformStructures[i]);\n      const layout = this._adaptor.createUboElements(elements);\n      const syncFunction = this._generateUboSync(layout.uboElements);\n      uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n        layout,\n        syncFunction\n      };\n    }\n    return this._syncFunctionHash[uniformGroupSignature];\n  }\n  _generateUboSync(uboElements) {\n    return this._adaptor.generateUboSync(uboElements);\n  }\n  syncUniformGroup(uniformGroup, data, offset) {\n    const uniformGroupData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new Buffer({\n      data: new Float32Array(uniformGroupData.layout.size / 4),\n      usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n    }));\n    data || (data = uniformGroup.buffer.data);\n    offset || (offset = 0);\n    uniformGroupData.syncFunction(uniformGroup.uniforms, data, offset);\n    return true;\n  }\n  updateUniformGroup(uniformGroup) {\n    if (uniformGroup.isStatic && !uniformGroup._dirtyId)\n      return false;\n    uniformGroup._dirtyId = 0;\n    const synced = this.syncUniformGroup(uniformGroup);\n    uniformGroup.buffer.update();\n    return synced;\n  }\n  destroy() {\n    this._syncFunctionHash = null;\n  }\n}\n\nexport { UboSystem };\n//# sourceMappingURL=UboSystem.mjs.map\n","\"use strict\";\nconst uniformParsers = [\n  // uploading pixi matrix object to mat3\n  {\n    type: \"mat3x3<f32>\",\n    test: (data) => {\n      const value = data.value;\n      return value.a !== void 0;\n    },\n    ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n    uniform: `\n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n  },\n  // uploading a pixi rectangle as a vec4\n  {\n    type: \"vec4<f32>\",\n    test: (data) => data.type === \"vec4<f32>\" && data.size === 1 && data.value.width !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n  },\n  // uploading a pixi point as a vec2\n  {\n    type: \"vec2<f32>\",\n    test: (data) => data.type === \"vec2<f32>\" && data.size === 1 && data.value.x !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n  },\n  // uploading a pixi color as a vec4\n  {\n    type: \"vec4<f32>\",\n    test: (data) => data.type === \"vec4<f32>\" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n  },\n  // uploading a pixi color as a vec3\n  {\n    type: \"vec3<f32>\",\n    test: (data) => data.type === \"vec3<f32>\" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n  }\n];\n\nexport { uniformParsers };\n//# sourceMappingURL=uniformParsers.mjs.map\n","import { uniformParsers } from './uniformParsers.mjs';\n\n\"use strict\";\nfunction createUboSyncFunction(uboElements, parserCode, arrayGenerationFunction, singleSettersMap) {\n  const funcFragments = [`\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `];\n  let prev = 0;\n  for (let i = 0; i < uboElements.length; i++) {\n    const uboElement = uboElements[i];\n    const name = uboElement.data.name;\n    let parsed = false;\n    let offset = 0;\n    for (let j = 0; j < uniformParsers.length; j++) {\n      const uniformParser = uniformParsers[j];\n      if (uniformParser.test(uboElement.data)) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          `name = \"${name}\";`,\n          `offset += ${offset - prev};`,\n          uniformParsers[j][parserCode] || uniformParsers[j].ubo\n        );\n        parsed = true;\n        break;\n      }\n    }\n    if (!parsed) {\n      if (uboElement.data.size > 1) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n      } else {\n        const template = singleSettersMap[uboElement.data.type];\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          /* wgsl */\n          `\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `\n        );\n      }\n    }\n    prev = offset;\n  }\n  const fragmentSrc = funcFragments.join(\"\\n\");\n  return new Function(\n    \"uv\",\n    \"data\",\n    \"offset\",\n    fragmentSrc\n  );\n}\n\nexport { createUboSyncFunction };\n//# sourceMappingURL=createUboSyncFunction.mjs.map\n","\"use strict\";\nfunction loopMatrix(col, row) {\n  const total = col * row;\n  return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\nconst uboSyncFunctionsSTD40 = {\n  f32: `\n        data[offset] = v;`,\n  i32: `\n        data[offset] = v;`,\n  \"vec2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n  \"vec3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n  \"vec4<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n  \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n  \"mat3x3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n  \"mat4x4<f32>\": `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n  \"mat3x2<f32>\": loopMatrix(3, 2),\n  \"mat4x2<f32>\": loopMatrix(4, 2),\n  \"mat2x3<f32>\": loopMatrix(2, 3),\n  \"mat4x3<f32>\": loopMatrix(4, 3),\n  \"mat2x4<f32>\": loopMatrix(2, 4),\n  \"mat3x4<f32>\": loopMatrix(3, 4)\n};\nconst uboSyncFunctionsWGSL = {\n  ...uboSyncFunctionsSTD40,\n  \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `\n};\n\nexport { uboSyncFunctionsSTD40, uboSyncFunctionsWGSL };\n//# sourceMappingURL=uboSyncFunctions.mjs.map\n","\"use strict\";\nfunction calculateProjection(pm, x, y, width, height, flipY) {\n  const sign = flipY ? 1 : -1;\n  pm.identity();\n  pm.a = 1 / width * 2;\n  pm.d = sign * (1 / height * 2);\n  pm.tx = -1 - x * pm.a;\n  pm.ty = -sign - y * pm.d;\n  return pm;\n}\n\nexport { calculateProjection };\n//# sourceMappingURL=calculateProjection.mjs.map\n","import { CanvasSource } from '../sources/CanvasSource.mjs';\nimport { Texture } from '../Texture.mjs';\n\n\"use strict\";\nconst canvasCache = /* @__PURE__ */ new Map();\nfunction getCanvasTexture(canvas, options) {\n  if (!canvasCache.has(canvas)) {\n    const texture = new Texture({\n      source: new CanvasSource({\n        resource: canvas,\n        ...options\n      })\n    });\n    const onDestroy = () => {\n      if (canvasCache.get(canvas) === texture) {\n        canvasCache.delete(canvas);\n      }\n    };\n    texture.once(\"destroy\", onDestroy);\n    texture.source.once(\"destroy\", onDestroy);\n    canvasCache.set(canvas, texture);\n  }\n  return canvasCache.get(canvas);\n}\nfunction hasCachedCanvasTexture(canvas) {\n  return canvasCache.has(canvas);\n}\n\nexport { getCanvasTexture, hasCachedCanvasTexture };\n//# sourceMappingURL=getCanvasTexture.mjs.map\n","\"use strict\";\nfunction isRenderingToScreen(renderTarget) {\n  const resource = renderTarget.colorTexture.source.resource;\n  return globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement && document.body.contains(resource);\n}\n\nexport { isRenderingToScreen };\n//# sourceMappingURL=isRenderingToScreen.mjs.map\n","import { uid } from '../../../../utils/data/uid.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst _RenderTarget = class _RenderTarget {\n  /**\n   * @param [descriptor] - Options for creating a render target.\n   */\n  constructor(descriptor = {}) {\n    this.uid = uid(\"renderTarget\");\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    this.colorTextures = [];\n    this.dirtyId = 0;\n    this.isRoot = false;\n    this._size = new Float32Array(2);\n    /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */\n    this._managedColorTextures = false;\n    descriptor = { ..._RenderTarget.defaultOptions, ...descriptor };\n    this.stencil = descriptor.stencil;\n    this.depth = descriptor.depth;\n    this.isRoot = descriptor.isRoot;\n    if (typeof descriptor.colorTextures === \"number\") {\n      this._managedColorTextures = true;\n      for (let i = 0; i < descriptor.colorTextures; i++) {\n        this.colorTextures.push(\n          new TextureSource({\n            width: descriptor.width,\n            height: descriptor.height,\n            resolution: descriptor.resolution,\n            antialias: descriptor.antialias\n          })\n        );\n      }\n    } else {\n      this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n      const colorSource = this.colorTexture.source;\n      this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n    }\n    this.colorTexture.source.on(\"resize\", this.onSourceResize, this);\n    if (descriptor.depthStencilTexture || this.stencil) {\n      if (descriptor.depthStencilTexture instanceof Texture || descriptor.depthStencilTexture instanceof TextureSource) {\n        this.depthStencilTexture = descriptor.depthStencilTexture.source;\n      } else {\n        this.ensureDepthStencilTexture();\n      }\n    }\n  }\n  get size() {\n    const _size = this._size;\n    _size[0] = this.pixelWidth;\n    _size[1] = this.pixelHeight;\n    return _size;\n  }\n  get width() {\n    return this.colorTexture.source.width;\n  }\n  get height() {\n    return this.colorTexture.source.height;\n  }\n  get pixelWidth() {\n    return this.colorTexture.source.pixelWidth;\n  }\n  get pixelHeight() {\n    return this.colorTexture.source.pixelHeight;\n  }\n  get resolution() {\n    return this.colorTexture.source._resolution;\n  }\n  get colorTexture() {\n    return this.colorTextures[0];\n  }\n  onSourceResize(source) {\n    this.resize(source.width, source.height, source._resolution, true);\n  }\n  /**\n   * This will ensure a depthStencil texture is created for this render target.\n   * Most likely called by the mask system to make sure we have stencil buffer added.\n   * @internal\n   * @ignore\n   */\n  ensureDepthStencilTexture() {\n    if (!this.depthStencilTexture) {\n      this.depthStencilTexture = new TextureSource({\n        width: this.width,\n        height: this.height,\n        resolution: this.resolution,\n        format: \"depth24plus-stencil8\",\n        autoGenerateMipmaps: false,\n        antialias: false,\n        mipLevelCount: 1\n        // sampleCount: handled by the render target system..\n      });\n    }\n  }\n  resize(width, height, resolution = this.resolution, skipColorTexture = false) {\n    this.dirtyId++;\n    this.colorTextures.forEach((colorTexture, i) => {\n      if (skipColorTexture && i === 0)\n        return;\n      colorTexture.source.resize(width, height, resolution);\n    });\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.source.resize(width, height, resolution);\n    }\n  }\n  destroy() {\n    this.colorTexture.source.off(\"resize\", this.onSourceResize, this);\n    if (this._managedColorTextures) {\n      this.colorTextures.forEach((texture) => {\n        texture.destroy();\n      });\n    }\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.destroy();\n      delete this.depthStencilTexture;\n    }\n  }\n};\n/** The default options for a render target */\n_RenderTarget.defaultOptions = {\n  /** the width of the RenderTarget */\n  width: 0,\n  /** the height of the RenderTarget */\n  height: 0,\n  /** the resolution of the RenderTarget */\n  resolution: 1,\n  /** an array of textures, or a number indicating how many color textures there should be */\n  colorTextures: 1,\n  /** should this render target have a stencil buffer? */\n  stencil: false,\n  /** should this render target have a depth buffer? */\n  depth: false,\n  /** should this render target be antialiased? */\n  antialias: false,\n  // save on perf by default!\n  /** is this a root element, true if this is gl context owners render target */\n  isRoot: false\n};\nlet RenderTarget = _RenderTarget;\n\nexport { RenderTarget };\n//# sourceMappingURL=RenderTarget.mjs.map\n","import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { CLEAR } from '../../gl/const.mjs';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection.mjs';\nimport { SystemRunner } from '../system/SystemRunner.mjs';\nimport { CanvasSource } from '../texture/sources/CanvasSource.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\nimport { isRenderingToScreen } from './isRenderingToScreen.mjs';\nimport { RenderTarget } from './RenderTarget.mjs';\n\n\"use strict\";\nclass RenderTargetSystem {\n  constructor(renderer) {\n    /** This is the root viewport for the render pass*/\n    this.rootViewPort = new Rectangle();\n    /** the current viewport that the gpu is using */\n    this.viewport = new Rectangle();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    this.onRenderTargetChange = new SystemRunner(\"onRenderTargetChange\");\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    this.projectionMatrix = new Matrix();\n    /** the default clear color for render targets */\n    this.defaultClearColor = [0, 0, 0, 0];\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    this._renderSurfaceToRenderTargetHash = /* @__PURE__ */ new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    this._renderTargetStack = [];\n    this._renderer = renderer;\n  }\n  /** called when dev wants to finish a render pass */\n  finishRenderPass() {\n    this.adaptor.finishRenderPass(this.renderTarget);\n  }\n  /**\n   * called when the renderer starts to render a scene.\n   * @param options\n   * @param options.target - the render target to render to\n   * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param options.clearColor - the color to clear to\n   * @param options.frame - the frame to render to\n   */\n  renderStart({\n    target,\n    clear,\n    clearColor,\n    frame\n  }) {\n    this._renderTargetStack.length = 0;\n    this.push(\n      target,\n      clear,\n      clearColor,\n      frame\n    );\n    this.rootViewPort.copyFrom(this.viewport);\n    this.rootRenderTarget = this.renderTarget;\n    this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n  }\n  /**\n   * Binding a render surface! This is the main function of the render target system.\n   * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n   * Once bound all draw calls will be rendered to the render surface.\n   *\n   * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n   * @param renderSurface - the render surface to bind\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to render to\n   * @returns the render target that was bound\n   */\n  bind(renderSurface, clear = true, clearColor, frame) {\n    const renderTarget = this.getRenderTarget(renderSurface);\n    const didChange = this.renderTarget !== renderTarget;\n    this.renderTarget = renderTarget;\n    this.renderSurface = renderSurface;\n    const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n    if (renderTarget.pixelWidth !== gpuRenderTarget.width || renderTarget.pixelHeight !== gpuRenderTarget.height) {\n      this.adaptor.resizeGpuRenderTarget(renderTarget);\n      gpuRenderTarget.width = renderTarget.pixelWidth;\n      gpuRenderTarget.height = renderTarget.pixelHeight;\n    }\n    const source = renderTarget.colorTexture;\n    const viewport = this.viewport;\n    const pixelWidth = source.pixelWidth;\n    const pixelHeight = source.pixelHeight;\n    if (!frame && renderSurface instanceof Texture) {\n      frame = renderSurface.frame;\n    }\n    if (frame) {\n      const resolution = source._resolution;\n      viewport.x = frame.x * resolution + 0.5 | 0;\n      viewport.y = frame.y * resolution + 0.5 | 0;\n      viewport.width = frame.width * resolution + 0.5 | 0;\n      viewport.height = frame.height * resolution + 0.5 | 0;\n    } else {\n      viewport.x = 0;\n      viewport.y = 0;\n      viewport.width = pixelWidth;\n      viewport.height = pixelHeight;\n    }\n    calculateProjection(\n      this.projectionMatrix,\n      0,\n      0,\n      viewport.width / source.resolution,\n      viewport.height / source.resolution,\n      !renderTarget.isRoot\n    );\n    this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n    if (didChange) {\n      this.onRenderTargetChange.emit(renderTarget);\n    }\n    return renderTarget;\n  }\n  clear(target, clear = CLEAR.ALL, clearColor) {\n    if (!clear)\n      return;\n    if (target) {\n      target = this.getRenderTarget(target);\n    }\n    this.adaptor.clear(\n      target || this.renderTarget,\n      clear,\n      clearColor,\n      this.viewport\n    );\n  }\n  contextChange() {\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * Push a render surface to the renderer. This will bind the render surface to the renderer,\n   * @param renderSurface - the render surface to push\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to use when rendering to the render surface\n   */\n  push(renderSurface, clear = CLEAR.ALL, clearColor, frame) {\n    const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n    this._renderTargetStack.push({\n      renderTarget,\n      frame\n    });\n    return renderTarget;\n  }\n  /** Pops the current render target from the renderer and restores the previous render target. */\n  pop() {\n    this._renderTargetStack.pop();\n    const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n    this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n  }\n  /**\n   * Gets the render target from the provide render surface. Eg if its a texture,\n   * it will return the render target for the texture.\n   * If its a render target, it will return the same render target.\n   * @param renderSurface - the render surface to get the render target for\n   * @returns the render target for the render surface\n   */\n  getRenderTarget(renderSurface) {\n    if (renderSurface.isTexture) {\n      renderSurface = renderSurface.source;\n    }\n    return this._renderSurfaceToRenderTargetHash.get(renderSurface) ?? this._initRenderTarget(renderSurface);\n  }\n  /**\n   * Copies a render surface to another texture\n   * @param sourceRenderSurfaceTexture - the render surface to copy from\n   * @param destinationTexture - the texture to copy to\n   * @param originSrc - the origin of the copy\n   * @param originSrc.x - the x origin of the copy\n   * @param originSrc.y - the y origin of the copy\n   * @param size - the size of the copy\n   * @param size.width - the width of the copy\n   * @param size.height - the height of the copy\n   * @param originDest - the destination origin (top left to paste from!)\n   * @param originDest.x - the x origin of the paste\n   * @param originDest.y - the y origin of the paste\n   */\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    if (originSrc.x < 0) {\n      size.width += originSrc.x;\n      originDest.x -= originSrc.x;\n      originSrc.x = 0;\n    }\n    if (originSrc.y < 0) {\n      size.height += originSrc.y;\n      originDest.y -= originSrc.y;\n      originSrc.y = 0;\n    }\n    const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n    size.width = Math.min(size.width, pixelWidth - originSrc.x);\n    size.height = Math.min(size.height, pixelHeight - originSrc.y);\n    return this.adaptor.copyToTexture(\n      sourceRenderSurfaceTexture,\n      destinationTexture,\n      originSrc,\n      size,\n      originDest\n    );\n  }\n  /**\n   * ensures that we have a depth stencil buffer available to render to\n   * This is used by the mask system to make sure we have a stencil buffer.\n   */\n  ensureDepthStencil() {\n    if (!this.renderTarget.stencil) {\n      this.renderTarget.stencil = true;\n      this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n    }\n  }\n  /** nukes the render target system */\n  destroy() {\n    this._renderer = null;\n    this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) => {\n      if (renderTarget !== key) {\n        renderTarget.destroy();\n      }\n    });\n    this._renderSurfaceToRenderTargetHash.clear();\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  _initRenderTarget(renderSurface) {\n    let renderTarget = null;\n    if (CanvasSource.test(renderSurface)) {\n      renderSurface = getCanvasTexture(renderSurface).source;\n    }\n    if (renderSurface instanceof RenderTarget) {\n      renderTarget = renderSurface;\n    } else if (renderSurface instanceof TextureSource) {\n      renderTarget = new RenderTarget({\n        colorTextures: [renderSurface]\n      });\n      if (CanvasSource.test(renderSurface.source.resource)) {\n        renderTarget.isRoot = true;\n      }\n      renderSurface.once(\"destroy\", () => {\n        renderTarget.destroy();\n        const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n        if (gpuRenderTarget) {\n          this._gpuRenderTargetHash[renderTarget.uid] = null;\n          this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n        }\n      });\n    }\n    this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n    return renderTarget;\n  }\n  getGpuRenderTarget(renderTarget) {\n    return this._gpuRenderTargetHash[renderTarget.uid] || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n  }\n}\n\nexport { RenderTargetSystem };\n//# sourceMappingURL=RenderTargetSystem.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid.mjs';\n\n\"use strict\";\nclass BufferResource extends EventEmitter {\n  /**\n   * Create a new Buffer Resource.\n   * @param options - The options for the buffer resource\n   * @param options.buffer - The underlying buffer that this resource is using\n   * @param options.offset - The offset of the buffer this resource is using.\n   * If not provided, then it will use the offset of the buffer.\n   * @param options.size - The size of the buffer this resource is using.\n   * If not provided, then it will use the size of the buffer.\n   */\n  constructor({ buffer, offset, size }) {\n    super();\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n    /**\n     * a unique id for this uniform group used through the renderer\n     * @internal\n     * @ignore\n     */\n    this.uid = uid(\"buffer\");\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    this._resourceType = \"bufferResource\";\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    this._touched = 0;\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    this._resourceId = uid(\"resource\");\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     * @ignore\n     */\n    this._bufferResource = true;\n    /**\n     * Has the Buffer resource been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    this.buffer = buffer;\n    this.offset = offset | 0;\n    this.size = size;\n    this.buffer.on(\"change\", this.onBufferChange, this);\n  }\n  onBufferChange() {\n    this._resourceId = uid(\"resource\");\n    this.emit(\"change\", this);\n  }\n  /**\n   * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n   * if you want to destroy it as well, or code will explode\n   * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n   */\n  destroy(destroyBuffer = false) {\n    this.destroyed = true;\n    if (destroyBuffer) {\n      this.buffer.destroy();\n    }\n    this.emit(\"change\", this);\n    this.buffer = null;\n  }\n}\n\nexport { BufferResource };\n//# sourceMappingURL=BufferResource.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass CustomRenderPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderable(container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(container);\n  }\n  execute(container) {\n    if (!container.isRenderable)\n      return;\n    container.render(this._renderer);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nCustomRenderPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"customRender\"\n};\n\nexport { CustomRenderPipe };\n//# sourceMappingURL=CustomRenderPipe.mjs.map\n","\"use strict\";\nfunction executeInstructions(renderGroup, renderer) {\n  const instructionSet = renderGroup.instructionSet;\n  const instructions = instructionSet.instructions;\n  for (let i = 0; i < instructionSet.instructionSize; i++) {\n    const instruction = instructions[i];\n    renderer[instruction.renderPipeId].execute(instruction);\n  }\n}\n\nexport { executeInstructions };\n//# sourceMappingURL=executeInstructions.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\n\n\"use strict\";\nclass RenderGroupPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderGroup(renderGroup, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderGroup);\n  }\n  execute(renderGroup) {\n    if (!renderGroup.isRenderable)\n      return;\n    this._renderer.globalUniforms.push({\n      worldTransformMatrix: renderGroup.worldTransform,\n      worldColor: renderGroup.worldColorAlpha\n    });\n    executeInstructions(renderGroup, this._renderer.renderPipes);\n    this._renderer.globalUniforms.pop();\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nRenderGroupPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"renderGroup\"\n};\n\nexport { RenderGroupPipe };\n//# sourceMappingURL=RenderGroupPipe.mjs.map\n","\"use strict\";\nfunction collectRenderGroups(renderGroup, out = []) {\n  out.push(renderGroup);\n  for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n    collectRenderGroups(renderGroup.renderGroupChildren[i], out);\n  }\n  return out;\n}\n\nexport { collectRenderGroups };\n//# sourceMappingURL=collectRenderGroups.mjs.map\n","\"use strict\";\nfunction mixHexColors(color1, color2, ratio) {\n  const r1 = color1 >> 16 & 255;\n  const g1 = color1 >> 8 & 255;\n  const b1 = color1 & 255;\n  const r2 = color2 >> 16 & 255;\n  const g2 = color2 >> 8 & 255;\n  const b2 = color2 & 255;\n  const r = r1 + (r2 - r1) * ratio;\n  const g = g1 + (g2 - g1) * ratio;\n  const b = b1 + (b2 - b1) * ratio;\n  return (r << 16) + (g << 8) + b;\n}\n\nexport { mixHexColors };\n//# sourceMappingURL=mixHexColors.mjs.map\n","import { mixHexColors } from './mixHexColors.mjs';\n\n\"use strict\";\nconst WHITE_BGR = 16777215;\nfunction mixColors(localBGRColor, parentBGRColor) {\n  if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR) {\n    return localBGRColor + parentBGRColor - WHITE_BGR;\n  }\n  return mixHexColors(localBGRColor, parentBGRColor, 0.5);\n}\nfunction mixStandardAnd32BitColors(localColorRGB, localAlpha, parentColor) {\n  const parentAlpha = (parentColor >> 24 & 255) / 255;\n  const globalAlpha = localAlpha * parentAlpha * 255;\n  const localBGRColor = ((localColorRGB & 255) << 16) + (localColorRGB & 65280) + (localColorRGB >> 16 & 255);\n  const parentBGRColor = parentColor & 16777215;\n  let sharedBGRColor;\n  if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR) {\n    sharedBGRColor = localBGRColor + parentBGRColor - WHITE_BGR;\n  } else {\n    sharedBGRColor = mixHexColors(localBGRColor, parentBGRColor, 0.5);\n  }\n  return sharedBGRColor + (globalAlpha << 24);\n}\n\nexport { mixColors, mixStandardAnd32BitColors };\n//# sourceMappingURL=mixColors.mjs.map\n","import { Container, UPDATE_COLOR, UPDATE_BLEND, UPDATE_VISIBLE } from '../Container.mjs';\nimport { mixColors } from './mixColors.mjs';\n\n\"use strict\";\nconst tempContainer = new Container();\nfunction updateRenderGroupTransforms(renderGroup, updateChildRenderGroups = false) {\n  updateRenderGroupTransform(renderGroup);\n  const childrenToUpdate = renderGroup.childrenToUpdate;\n  const updateTick = renderGroup.updateTick++;\n  for (const j in childrenToUpdate) {\n    const renderGroupDepth = Number(j);\n    const childrenAtDepth = childrenToUpdate[j];\n    const list = childrenAtDepth.list;\n    const index = childrenAtDepth.index;\n    for (let i = 0; i < index; i++) {\n      const child = list[i];\n      if (child.parentRenderGroup === renderGroup && child.relativeRenderGroupDepth === renderGroupDepth) {\n        updateTransformAndChildren(child, updateTick, 0);\n      }\n    }\n    childrenAtDepth.index = 0;\n  }\n  if (updateChildRenderGroups) {\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n    }\n  }\n}\nfunction updateRenderGroupTransform(renderGroup) {\n  const root = renderGroup.root;\n  let worldAlpha;\n  if (renderGroup.renderGroupParent) {\n    const renderGroupParent = renderGroup.renderGroupParent;\n    renderGroup.worldTransform.appendFrom(\n      root.relativeGroupTransform,\n      renderGroupParent.worldTransform\n    );\n    renderGroup.worldColor = mixColors(\n      root.groupColor,\n      renderGroupParent.worldColor\n    );\n    worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n  } else {\n    renderGroup.worldTransform.copyFrom(root.localTransform);\n    renderGroup.worldColor = root.localColor;\n    worldAlpha = root.localAlpha;\n  }\n  worldAlpha = worldAlpha < 0 ? 0 : worldAlpha > 1 ? 1 : worldAlpha;\n  renderGroup.worldAlpha = worldAlpha;\n  renderGroup.worldColorAlpha = renderGroup.worldColor + ((worldAlpha * 255 | 0) << 24);\n}\nfunction updateTransformAndChildren(container, updateTick, updateFlags) {\n  if (updateTick === container.updateTick)\n    return;\n  container.updateTick = updateTick;\n  container.didChange = false;\n  const localTransform = container.localTransform;\n  container.updateLocalTransform();\n  const parent = container.parent;\n  if (parent && !parent.renderGroup) {\n    updateFlags = updateFlags | container._updateFlags;\n    container.relativeGroupTransform.appendFrom(\n      localTransform,\n      parent.relativeGroupTransform\n    );\n    if (updateFlags) {\n      updateColorBlendVisibility(container, parent, updateFlags);\n    }\n  } else {\n    updateFlags = container._updateFlags;\n    container.relativeGroupTransform.copyFrom(localTransform);\n    if (updateFlags) {\n      updateColorBlendVisibility(container, tempContainer, updateFlags);\n    }\n  }\n  if (!container.renderGroup) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      updateTransformAndChildren(children[i], updateTick, updateFlags);\n    }\n    const renderGroup = container.parentRenderGroup;\n    if (container.renderPipeId && !renderGroup.structureDidChange) {\n      renderGroup.updateRenderable(container);\n    }\n  }\n}\nfunction updateColorBlendVisibility(container, parent, updateFlags) {\n  if (updateFlags & UPDATE_COLOR) {\n    container.groupColor = mixColors(\n      container.localColor,\n      parent.groupColor\n    );\n    let groupAlpha = container.localAlpha * parent.groupAlpha;\n    groupAlpha = groupAlpha < 0 ? 0 : groupAlpha > 1 ? 1 : groupAlpha;\n    container.groupAlpha = groupAlpha;\n    container.groupColorAlpha = container.groupColor + ((groupAlpha * 255 | 0) << 24);\n  }\n  if (updateFlags & UPDATE_BLEND) {\n    container.groupBlendMode = container.localBlendMode === \"inherit\" ? parent.groupBlendMode : container.localBlendMode;\n  }\n  if (updateFlags & UPDATE_VISIBLE) {\n    container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n  }\n  container._updateFlags = 0;\n}\n\nexport { updateRenderGroupTransform, updateRenderGroupTransforms, updateTransformAndChildren };\n//# sourceMappingURL=updateRenderGroupTransforms.mjs.map\n","\"use strict\";\nfunction validateRenderables(renderGroup, renderPipes) {\n  const { list, index } = renderGroup.childrenRenderablesToUpdate;\n  let rebuildRequired = false;\n  for (let i = 0; i < index; i++) {\n    const container = list[i];\n    const renderable = container;\n    const pipe = renderPipes[renderable.renderPipeId];\n    rebuildRequired = pipe.validateRenderable(container);\n    if (rebuildRequired) {\n      break;\n    }\n  }\n  renderGroup.structureDidChange = rebuildRequired;\n  return rebuildRequired;\n}\n\nexport { validateRenderables };\n//# sourceMappingURL=validateRenderables.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { buildInstructions } from './utils/buildInstructions.mjs';\nimport { collectRenderGroups } from './utils/collectRenderGroups.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\nimport { updateRenderGroupTransforms } from './utils/updateRenderGroupTransforms.mjs';\nimport { validateRenderables } from './utils/validateRenderables.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nclass RenderGroupSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  render({ container, transform }) {\n    container.isRenderGroup = true;\n    const parent = container.parent;\n    const renderGroupParent = container.renderGroup.renderGroupParent;\n    container.parent = null;\n    container.renderGroup.renderGroupParent = null;\n    const renderer = this._renderer;\n    const renderGroups = collectRenderGroups(container.renderGroup, []);\n    let originalLocalTransform = tempMatrix;\n    if (transform) {\n      originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n      container.renderGroup.localTransform.copyFrom(transform);\n    }\n    const renderPipes = renderer.renderPipes;\n    for (let i = 0; i < renderGroups.length; i++) {\n      const renderGroup = renderGroups[i];\n      renderGroup.runOnRender();\n      renderGroup.instructionSet.renderPipes = renderPipes;\n      if (!renderGroup.structureDidChange) {\n        validateRenderables(renderGroup, renderPipes);\n      }\n      updateRenderGroupTransforms(renderGroup);\n      if (renderGroup.structureDidChange) {\n        renderGroup.structureDidChange = false;\n        buildInstructions(renderGroup, renderPipes);\n      } else {\n        updateRenderables(renderGroup);\n      }\n      renderGroup.childrenRenderablesToUpdate.index = 0;\n      renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n    }\n    renderer.globalUniforms.start({\n      worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n      worldColor: container.renderGroup.worldColorAlpha\n    });\n    executeInstructions(container.renderGroup, renderPipes);\n    if (renderPipes.uniformBatch) {\n      renderPipes.uniformBatch.renderEnd();\n    }\n    if (transform) {\n      container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n    }\n    container.parent = parent;\n    container.renderGroup.renderGroupParent = renderGroupParent;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nRenderGroupSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"renderGroup\"\n};\nfunction updateRenderables(renderGroup) {\n  const { list, index } = renderGroup.childrenRenderablesToUpdate;\n  for (let i = 0; i < index; i++) {\n    const container = list[i];\n    if (container.didViewUpdate) {\n      renderGroup.updateRenderable(container);\n    }\n  }\n}\n\nexport { RenderGroupSystem };\n//# sourceMappingURL=RenderGroupSystem.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from './BatchableSprite.mjs';\n\n\"use strict\";\nclass SpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  addRenderable(sprite, _instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite.batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const texture = sprite._texture;\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (gpuSprite.texture._source !== texture._source) {\n      return !gpuSprite.batcher.checkAndUpdateTexture(gpuSprite, texture);\n    }\n    return false;\n  }\n  destroyRenderable(sprite) {\n    const batchableSprite = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableSprite);\n    this._gpuSpriteHash[sprite.uid] = null;\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    sprite._didSpriteUpdate = false;\n    batchableSprite.bounds = sprite.bounds;\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableSprite = BigPool.get(BatchableSprite);\n    batchableSprite.renderable = sprite;\n    batchableSprite.texture = sprite._texture;\n    batchableSprite.bounds = sprite.bounds;\n    batchableSprite.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableSprite;\n    sprite._didSpriteUpdate = false;\n    sprite.on(\"destroyed\", () => {\n      this.destroyRenderable(sprite);\n    });\n    return batchableSprite;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      BigPool.return(this._gpuSpriteHash[i]);\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"sprite\"\n};\n\nexport { SpritePipe };\n//# sourceMappingURL=SpritePipe.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst _BackgroundSystem = class _BackgroundSystem {\n  constructor() {\n    this.clearBeforeRender = true;\n    this._backgroundColor = new Color(0);\n    this.color = this._backgroundColor;\n    this.alpha = 1;\n  }\n  /**\n   * initiates the background system\n   * @param options - the options for the background colors\n   */\n  init(options) {\n    options = { ..._BackgroundSystem.defaultOptions, ...options };\n    this.clearBeforeRender = options.clearBeforeRender;\n    this.color = options.background || options.backgroundColor || this._backgroundColor;\n    this.alpha = options.backgroundAlpha;\n    this._backgroundColor.setAlpha(options.backgroundAlpha);\n  }\n  /** The background color to fill if not transparent */\n  get color() {\n    return this._backgroundColor;\n  }\n  set color(value) {\n    this._backgroundColor.setValue(value);\n  }\n  /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n  get alpha() {\n    return this._backgroundColor.alpha;\n  }\n  set alpha(value) {\n    this._backgroundColor.setAlpha(value);\n  }\n  /** The background color as an [R, G, B, A] array. */\n  get colorRgba() {\n    return this._backgroundColor.toArray();\n  }\n  /**\n   * destroys the background system\n   * @internal\n   * @ignore\n   */\n  destroy() {\n  }\n};\n/** @ignore */\n_BackgroundSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"background\",\n  priority: 0\n};\n/** default options used by the system */\n_BackgroundSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.backgroundAlpha}\n   * @default 1\n   */\n  backgroundAlpha: 1,\n  /**\n   * {@link WebGLOptions.backgroundColor}\n   * @default 0x000000\n   */\n  backgroundColor: 0,\n  /**\n   * {@link WebGLOptions.clearBeforeRender}\n   * @default true\n   */\n  clearBeforeRender: true\n};\nlet BackgroundSystem = _BackgroundSystem;\n\nexport { BackgroundSystem };\n//# sourceMappingURL=BackgroundSystem.mjs.map\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { FilterEffect } from '../../../../filters/FilterEffect.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nconst BLEND_MODE_FILTERS = {};\nextensions.handle(ExtensionType.BlendMode, (value) => {\n  if (!value.name) {\n    throw new Error(\"BlendMode extension must have a name property\");\n  }\n  BLEND_MODE_FILTERS[value.name] = value.ref;\n}, (value) => {\n  delete BLEND_MODE_FILTERS[value.name];\n});\nclass BlendModePipe {\n  constructor(renderer) {\n    this._isAdvanced = false;\n    this._filterHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  /**\n   * This ensures that a blendMode switch is added to the instruction set if the blend mode has changed.\n   * @param renderable - The renderable we are adding to the instruction set\n   * @param blendMode - The blend mode of the renderable\n   * @param instructionSet - The instruction set we are adding to\n   */\n  setBlendMode(renderable, blendMode, instructionSet) {\n    if (this._activeBlendMode === blendMode) {\n      if (this._isAdvanced)\n        this._renderableList.push(renderable);\n      return;\n    }\n    this._activeBlendMode = blendMode;\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n    this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n    if (this._isAdvanced) {\n      this._beginAdvancedBlendMode(instructionSet);\n      this._renderableList.push(renderable);\n    }\n  }\n  _beginAdvancedBlendMode(instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    const blendMode = this._activeBlendMode;\n    if (!BLEND_MODE_FILTERS[blendMode]) {\n      warn(`Unable to assign BlendMode: '${blendMode}'. You may want to include: import 'pixi.js/advanced-blend-modes'`);\n      return;\n    }\n    let filterEffect = this._filterHash[blendMode];\n    if (!filterEffect) {\n      filterEffect = this._filterHash[blendMode] = new FilterEffect();\n      filterEffect.filters = [new BLEND_MODE_FILTERS[blendMode]()];\n    }\n    const instruction = {\n      renderPipeId: \"filter\",\n      action: \"pushFilter\",\n      renderables: [],\n      filterEffect,\n      canBundle: false\n    };\n    this._renderableList = instruction.renderables;\n    instructionSet.add(instruction);\n  }\n  _endAdvancedBlendMode(instructionSet) {\n    this._renderableList = null;\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  /**\n   * called when the instruction build process is starting this will reset internally to the default blend mode\n   * @internal\n   * @ignore\n   */\n  buildStart() {\n    this._isAdvanced = false;\n  }\n  /**\n   * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n   * active, we add the final render instructions added to the instruction set\n   * @param instructionSet - The instruction set we are adding to\n   * @internal\n   * @ignore\n   */\n  buildEnd(instructionSet) {\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n  }\n  /**\n   * @internal\n   * @ignore\n   */\n  destroy() {\n    this._renderer = null;\n    this._renderableList = null;\n    for (const i in this._filterHash) {\n      this._filterHash[i].destroy();\n    }\n    this._filterHash = null;\n  }\n}\n/** @ignore */\nBlendModePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"blendMode\"\n};\n\nexport { BlendModePipe };\n//# sourceMappingURL=BlendModePipe.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst imageTypes = {\n  png: \"image/png\",\n  jpg: \"image/jpeg\",\n  webp: \"image/webp\"\n};\nconst _ExtractSystem = class _ExtractSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  _normalizeOptions(options, defaults = {}) {\n    if (options instanceof Container || options instanceof Texture) {\n      return {\n        target: options,\n        ...defaults\n      };\n    }\n    return {\n      ...defaults,\n      ...options\n    };\n  }\n  /**\n   * Will return a HTML Image of the target\n   * @param options - The options for creating the image, or the target to extract\n   * @returns - HTML Image of the target\n   */\n  async image(options) {\n    const image = new Image();\n    image.src = await this.base64(options);\n    return image;\n  }\n  /**\n   * Will return a base64 encoded string of this target. It works by calling\n   * `Extract.canvas` and then running toDataURL on that.\n   * @param options - The options for creating the image, or the target to extract\n   */\n  async base64(options) {\n    options = this._normalizeOptions(\n      options,\n      _ExtractSystem.defaultImageOptions\n    );\n    const { format, quality } = options;\n    const canvas = this.canvas(options);\n    if (canvas.toBlob !== void 0) {\n      return new Promise((resolve, reject) => {\n        canvas.toBlob((blob) => {\n          if (!blob) {\n            reject(new Error(\"ICanvas.toBlob failed!\"));\n            return;\n          }\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result);\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        }, imageTypes[format], quality);\n      });\n    }\n    if (canvas.toDataURL !== void 0) {\n      return canvas.toDataURL(imageTypes[format], quality);\n    }\n    if (canvas.convertToBlob !== void 0) {\n      const blob = await canvas.convertToBlob({ type: imageTypes[format], quality });\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    }\n    throw new Error(\"Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, or ICanvas.convertToBlob to be implemented\");\n  }\n  /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   * @param options - The options for creating the canvas, or the target to extract\n   * @returns - A Canvas element with the texture rendered on.\n   */\n  canvas(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    if (target instanceof Texture) {\n      return renderer.texture.generateCanvas(target);\n    }\n    const texture = renderer.textureGenerator.generateTexture(options);\n    const canvas = renderer.texture.generateCanvas(texture);\n    texture.destroy();\n    return canvas;\n  }\n  /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   * @param options - The options for extracting the image, or the target to extract\n   * @returns - One-dimensional array containing the pixel data of the entire texture\n   */\n  pixels(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    const texture = target instanceof Texture ? target : renderer.textureGenerator.generateTexture(options);\n    const pixelInfo = renderer.texture.getPixels(texture);\n    if (target instanceof Container) {\n      texture.destroy();\n    }\n    return pixelInfo;\n  }\n  /**\n   * Will return a texture of the target\n   * @param options - The options for creating the texture, or the target to extract\n   * @returns - A texture of the target\n   */\n  texture(options) {\n    options = this._normalizeOptions(options);\n    if (options.target instanceof Texture)\n      return options.target;\n    return this._renderer.textureGenerator.generateTexture(options);\n  }\n  /**\n   * Will extract a HTMLImage of the target and download it\n   * @param options - The options for downloading and extracting the image, or the target to extract\n   */\n  download(options) {\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const link = document.createElement(\"a\");\n    link.download = options.filename ?? \"image.png\";\n    link.href = canvas.toDataURL(\"image/png\");\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n  /**\n   * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n   * @param options - The options for logging the image, or the target to log\n   */\n  log(options) {\n    const width = options.width ?? 200;\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const base64 = canvas.toDataURL();\n    console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n    const style = [\n      \"font-size: 1px;\",\n      `padding: ${width}px ${300}px;`,\n      `background: url(${base64}) no-repeat;`,\n      \"background-size: contain;\"\n    ].join(\" \");\n    console.log(\"%c \", style);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_ExtractSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"extract\"\n};\n/** Default options for creating an image. */\n_ExtractSystem.defaultImageOptions = {\n  /** The format of the image. */\n  format: \"png\",\n  /** The quality of the image. */\n  quality: 1\n};\nlet ExtractSystem = _ExtractSystem;\n\nexport { ExtractSystem };\n//# sourceMappingURL=ExtractSystem.mjs.map\n","import { TextureSource } from './sources/TextureSource.mjs';\nimport { Texture } from './Texture.mjs';\n\n\"use strict\";\nclass RenderTexture extends Texture {\n  static create(options) {\n    return new Texture({\n      source: new TextureSource(options)\n    });\n  }\n  /**\n   * Resizes the render texture.\n   * @param width - The new width of the render texture.\n   * @param height - The new height of the render texture.\n   * @param resolution - The new resolution of the render texture.\n   * @returns This texture.\n   */\n  resize(width, height, resolution) {\n    this.source.resize(width, height, resolution);\n    return this;\n  }\n}\n\nexport { RenderTexture };\n//# sourceMappingURL=RenderTexture.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds.mjs';\nimport { getLocalBounds } from '../../../../scene/container/bounds/getLocalBounds.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { RenderTexture } from '../texture/RenderTexture.mjs';\n\n\"use strict\";\nconst tempRect = new Rectangle();\nconst tempBounds = new Bounds();\nconst noColor = [0, 0, 0, 0];\nclass GenerateTextureSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * A Useful function that returns a texture of the display object that can then be used to create sprites\n   * This can be quite useful if your container is complicated and needs to be reused multiple times.\n   * @param {GenerateTextureOptions | Container} options - Generate texture options.\n   * @param {Container} [options.container] - If not given, the renderer's resolution is used.\n   * @param {Rectangle} options.region - The region of the container, that shall be rendered,\n   * @param {number} [options.resolution] - The resolution of the texture being generated.\n   *        if no region is specified, defaults to the local bounds of the container.\n   * @param {GenerateTextureSourceOptions} [options.textureSourceOptions] - Texture options for GPU.\n   * @returns a shiny new texture of the container passed in\n   */\n  generateTexture(options) {\n    if (options instanceof Container) {\n      options = {\n        target: options,\n        frame: void 0,\n        textureSourceOptions: {},\n        resolution: void 0\n      };\n    }\n    const resolution = options.resolution || this._renderer.resolution;\n    const antialias = options.antialias || this._renderer.view.antialias;\n    const container = options.target;\n    let clearColor = options.clearColor;\n    if (clearColor) {\n      const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n      clearColor = isRGBAArray ? clearColor : Color.shared.setValue(clearColor).toArray();\n    } else {\n      clearColor = noColor;\n    }\n    const region = options.frame?.copyTo(tempRect) || getLocalBounds(container, tempBounds).rectangle;\n    region.width = Math.max(region.width, 1 / resolution) | 0;\n    region.height = Math.max(region.height, 1 / resolution) | 0;\n    const target = RenderTexture.create({\n      ...options.textureSourceOptions,\n      width: region.width,\n      height: region.height,\n      resolution,\n      antialias\n    });\n    const transform = Matrix.shared.translate(-region.x, -region.y);\n    this._renderer.render({\n      container,\n      transform,\n      target,\n      clearColor\n    });\n    target.source.updateMipmaps();\n    return target;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGenerateTextureSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGenerator\"\n};\n\nexport { GenerateTextureSystem };\n//# sourceMappingURL=GenerateTextureSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Point } from '../../../../maths/point/Point.mjs';\nimport { color32BitToUniform } from '../../../../scene/graphics/gpu/colorToUniform.mjs';\nimport { BindGroup } from '../../gpu/shader/BindGroup.mjs';\nimport { RendererType } from '../../types.mjs';\nimport { UniformGroup } from '../shader/UniformGroup.mjs';\n\n\"use strict\";\nclass GlobalUniformSystem {\n  constructor(renderer) {\n    this._stackIndex = 0;\n    this._globalUniformDataStack = [];\n    this._uniformsPool = [];\n    this._activeUniforms = [];\n    this._bindGroupPool = [];\n    this._activeBindGroups = [];\n    this._renderer = renderer;\n  }\n  reset() {\n    this._stackIndex = 0;\n    for (let i = 0; i < this._activeUniforms.length; i++) {\n      this._uniformsPool.push(this._activeUniforms[i]);\n    }\n    for (let i = 0; i < this._activeBindGroups.length; i++) {\n      this._bindGroupPool.push(this._activeBindGroups[i]);\n    }\n    this._activeUniforms.length = 0;\n    this._activeBindGroups.length = 0;\n  }\n  start(options) {\n    this.reset();\n    this.push(options);\n  }\n  bind({\n    size,\n    projectionMatrix,\n    worldTransformMatrix,\n    worldColor,\n    offset\n  }) {\n    const renderTarget = this._renderer.renderTarget.renderTarget;\n    const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n      projectionData: renderTarget,\n      worldTransformMatrix: new Matrix(),\n      worldColor: 4294967295,\n      offset: new Point()\n    };\n    const globalUniformData = {\n      projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n      resolution: size || renderTarget.size,\n      worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n      worldColor: worldColor || currentGlobalUniformData.worldColor,\n      offset: offset || currentGlobalUniformData.offset,\n      bindGroup: null\n    };\n    const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n    this._activeUniforms.push(uniformGroup);\n    const uniforms = uniformGroup.uniforms;\n    uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n    uniforms.uResolution = globalUniformData.resolution;\n    uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n    uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n    uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n    color32BitToUniform(\n      globalUniformData.worldColor,\n      uniforms.uWorldColorAlpha,\n      0\n    );\n    uniformGroup.update();\n    let bindGroup;\n    if (this._renderer.renderPipes.uniformBatch) {\n      bindGroup = this._renderer.renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n    } else {\n      bindGroup = this._bindGroupPool.pop() || new BindGroup();\n      this._activeBindGroups.push(bindGroup);\n      bindGroup.setResource(uniformGroup, 0);\n    }\n    globalUniformData.bindGroup = bindGroup;\n    this._currentGlobalUniformData = globalUniformData;\n  }\n  push(options) {\n    this.bind(options);\n    this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n  }\n  pop() {\n    this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n    if (this._renderer.type === RendererType.WEBGL) {\n      this._currentGlobalUniformData.bindGroup.resources[0].update();\n    }\n  }\n  get bindGroup() {\n    return this._currentGlobalUniformData.bindGroup;\n  }\n  get uniformGroup() {\n    return this._currentGlobalUniformData.bindGroup.resources[0];\n  }\n  _createUniforms() {\n    const globalUniforms = new UniformGroup({\n      uProjectionMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uWorldTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n      uWorldColorAlpha: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    }, {\n      isStatic: true\n    });\n    return globalUniforms;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGlobalUniformSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"globalUniforms\"\n};\n\nexport { GlobalUniformSystem };\n//# sourceMappingURL=GlobalUniformSystem.mjs.map\n","import { DOMAdapter } from '../environment/adapter.mjs';\n\n\"use strict\";\nlet saidHello = false;\nconst VERSION = \"8.2.1\";\nfunction sayHello(type) {\n  if (saidHello) {\n    return;\n  }\n  if (DOMAdapter.get().getNavigator().userAgent.toLowerCase().indexOf(\"chrome\") > -1) {\n    const args = [\n      `%c  %c  %c  %c  %c PixiJS %c v${VERSION} (${type}) http://www.pixijs.com/\n\n`,\n      \"background: #E72264; padding:5px 0;\",\n      \"background: #6CA2EA; padding:5px 0;\",\n      \"background: #B5D33D; padding:5px 0;\",\n      \"background: #FED23F; padding:5px 0;\",\n      \"color: #FFFFFF; background: #E72264; padding:5px 0;\",\n      \"color: #E72264; background: #FFFFFF; padding:5px 0;\"\n    ];\n    globalThis.console.log(...args);\n  } else if (globalThis.console) {\n    globalThis.console.log(`PixiJS ${VERSION} - ${type} - http://www.pixijs.com/`);\n  }\n  saidHello = true;\n}\n\nexport { VERSION, sayHello };\n//# sourceMappingURL=sayHello.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { sayHello } from '../../../../utils/sayHello.mjs';\nimport { RendererType } from '../../types.mjs';\n\n\"use strict\";\nclass HelloSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * It all starts here! This initiates every system, passing in the options for any system by name.\n   * @param options - the config for the renderer and all its systems\n   */\n  init(options) {\n    if (options.hello) {\n      let name = this._renderer.name;\n      if (this._renderer.type === RendererType.WEBGL) {\n        name += ` ${this._renderer.context.webGLVersion}`;\n      }\n      sayHello(name);\n    }\n  }\n}\n/** @ignore */\nHelloSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"hello\",\n  priority: -2\n};\n/** The default options for the system. */\nHelloSystem.defaultOptions = {\n  /** {@link WebGLOptions.hello} */\n  hello: false\n};\n\nexport { HelloSystem };\n//# sourceMappingURL=HelloSystem.mjs.map\n","import { ExtensionType, extensions } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst _TextureGCSystem = class _TextureGCSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n    this.count = 0;\n    this.checkCount = 0;\n  }\n  init(options) {\n    options = { ..._TextureGCSystem.defaultOptions, ...options };\n    this.checkCountMax = options.textureGCCheckCountMax;\n    this.maxIdle = options.textureGCAMaxIdle;\n    this.active = options.textureGCActive;\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  postrender() {\n    if (!this._renderer.renderingToScreen) {\n      return;\n    }\n    this.count++;\n    if (!this.active)\n      return;\n    this.checkCount++;\n    if (this.checkCount > this.checkCountMax) {\n      this.checkCount = 0;\n      this.run();\n    }\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  run() {\n    const managedTextures = this._renderer.texture.managedTextures;\n    for (let i = 0; i < managedTextures.length; i++) {\n      const texture = managedTextures[i];\n      if (texture.autoGarbageCollect && texture.resource && texture._touched > -1 && this.count - texture._touched > this.maxIdle) {\n        texture._touched = -1;\n        texture.unload();\n      }\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_TextureGCSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGC\"\n};\n/** default options for the TextureGCSystem */\n_TextureGCSystem.defaultOptions = {\n  /**\n   * If set to true, this will enable the garbage collector on the GPU.\n   * @default true\n   */\n  textureGCActive: true,\n  /**\n   * The maximum idle frames before a texture is destroyed by garbage collection.\n   * @default 60 * 60\n   */\n  textureGCAMaxIdle: 60 * 60,\n  /**\n   * Frames between two garbage collections.\n   * @default 600\n   */\n  textureGCCheckCountMax: 600\n};\nlet TextureGCSystem = _TextureGCSystem;\nextensions.add(TextureGCSystem);\n\nexport { TextureGCSystem };\n//# sourceMappingURL=TextureGCSystem.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\nimport { RenderTarget } from '../renderTarget/RenderTarget.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\n\n\"use strict\";\nconst _ViewSystem = class _ViewSystem {\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this.texture.source._resolution;\n  }\n  set resolution(value) {\n    this.texture.source.resize(\n      this.texture.source.width,\n      this.texture.source.height,\n      value\n    );\n  }\n  /**\n   * initiates the view system\n   * @param options - the options for the view\n   */\n  init(options) {\n    options = {\n      ..._ViewSystem.defaultOptions,\n      ...options\n    };\n    if (options.view) {\n      deprecation(v8_0_0, \"ViewSystem.view has been renamed to ViewSystem.canvas\");\n      options.canvas = options.view;\n    }\n    this.screen = new Rectangle(0, 0, options.width, options.height);\n    this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n    this.antialias = !!options.antialias;\n    this.texture = getCanvasTexture(this.canvas, options);\n    this.renderTarget = new RenderTarget({\n      colorTextures: [this.texture],\n      depth: !!options.depth,\n      isRoot: true\n    });\n    this.texture.source.transparent = options.backgroundAlpha < 1;\n    this.multiView = !!options.multiView;\n    if (this.autoDensity) {\n      this.canvas.style.width = `${this.texture.width}px`;\n      this.canvas.style.height = `${this.texture.height}px`;\n    }\n    this.resolution = options.resolution;\n  }\n  /**\n   * Resizes the screen and canvas to the specified dimensions.\n   * @param desiredScreenWidth - The new width of the screen.\n   * @param desiredScreenHeight - The new height of the screen.\n   * @param resolution\n   */\n  resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n    this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    this.screen.width = this.texture.frame.width;\n    this.screen.height = this.texture.frame.height;\n    if (this.autoDensity) {\n      this.canvas.style.width = `${desiredScreenWidth}px`;\n      this.canvas.style.height = `${desiredScreenHeight}px`;\n    }\n  }\n  /**\n   * Destroys this System and optionally removes the canvas from the dom.\n   * @param {options | false} options - The options for destroying the view, or \"false\".\n   * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n   */\n  destroy(options = false) {\n    const removeView = typeof options === \"boolean\" ? options : !!options?.removeView;\n    if (removeView && this.canvas.parentNode) {\n      this.canvas.parentNode.removeChild(this.canvas);\n    }\n  }\n};\n/** @ignore */\n_ViewSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"view\",\n  priority: 0\n};\n/** The default options for the view system. */\n_ViewSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.width}\n   * @default 800\n   */\n  width: 800,\n  /**\n   * {@link WebGLOptions.height}\n   * @default 600\n   */\n  height: 600,\n  /**\n   * {@link WebGLOptions.autoDensity}\n   * @default false\n   */\n  autoDensity: false,\n  /**\n   * {@link WebGLOptions.antialias}\n   * @default false\n   */\n  antialias: false\n};\nlet ViewSystem = _ViewSystem;\n\nexport { ViewSystem };\n//# sourceMappingURL=ViewSystem.mjs.map\n","import { CustomRenderPipe } from '../../../../scene/container/CustomRenderPipe.mjs';\nimport { RenderGroupPipe } from '../../../../scene/container/RenderGroupPipe.mjs';\nimport { RenderGroupSystem } from '../../../../scene/container/RenderGroupSystem.mjs';\nimport { SpritePipe } from '../../../../scene/sprite/SpritePipe.mjs';\nimport { RendererInitHook } from '../../../../utils/global/globalHooks.mjs';\nimport { BatcherPipe } from '../../../batcher/shared/BatcherPipe.mjs';\nimport { AlphaMaskPipe } from '../../../mask/alpha/AlphaMaskPipe.mjs';\nimport { ColorMaskPipe } from '../../../mask/color/ColorMaskPipe.mjs';\nimport { StencilMaskPipe } from '../../../mask/stencil/StencilMaskPipe.mjs';\nimport { BackgroundSystem } from '../background/BackgroundSystem.mjs';\nimport { BlendModePipe } from '../blendModes/BlendModePipe.mjs';\nimport { ExtractSystem } from '../extract/ExtractSystem.mjs';\nimport { GenerateTextureSystem } from '../extract/GenerateTextureSystem.mjs';\nimport { GlobalUniformSystem } from '../renderTarget/GlobalUniformSystem.mjs';\nimport { HelloSystem } from '../startup/HelloSystem.mjs';\nimport { TextureGCSystem } from '../texture/TextureGCSystem.mjs';\nimport { ViewSystem } from '../view/ViewSystem.mjs';\n\n\"use strict\";\nconst SharedSystems = [\n  BackgroundSystem,\n  GlobalUniformSystem,\n  HelloSystem,\n  ViewSystem,\n  RenderGroupSystem,\n  TextureGCSystem,\n  GenerateTextureSystem,\n  ExtractSystem,\n  RendererInitHook\n];\nconst SharedRenderPipes = [\n  BlendModePipe,\n  BatcherPipe,\n  SpritePipe,\n  RenderGroupPipe,\n  AlphaMaskPipe,\n  StencilMaskPipe,\n  ColorMaskPipe,\n  CustomRenderPipe\n];\n\nexport { SharedRenderPipes, SharedSystems };\n//# sourceMappingURL=SharedSystems.mjs.map\n"],"names":["fragment","vertex","source","MaskFilter","Filter","options","sprite","rest","textureMatrix","TextureMatrix","filterUniforms","UniformGroup","Matrix","gpuProgram","GpuProgram","glProgram","GlProgram","filterManager","input","output","clearMode","BatcherPipe","renderer","adaptor","State","instructionSet","batcher","Batcher","BatchGeometry","batchableObject","activeBatch","geometry","batch","i","ExtensionType","textureBit","textureBitGl","buildInstructions","renderGroup","renderPipes","root","collectAllRenderablesAdvanced","collectAllRenderables","container","rendererPipes","collectAllRenderablesSimple","children","length","isRoot","effect","renderPipeId","tempBounds","Bounds","AlphaMaskEffect","FilterEffect","Sprite","Texture","value","AlphaMaskPipe","mask","maskedContainer","maskContainer","_maskedContainer","instruction","renderMask","filterEffect","BigPool","bounds","getGlobalBounds","filterTexture","TexturePool","maskData","ColorMaskPipe","_container","colorStack","currentColor","_mask","StencilMaskPipe","_a","instructionsLength","renderTargetUid","maskStackIndex","STENCIL_MODES","CLEAR","ensureAttributes","extractedData","attribute","attributeData","warn","ensureStartAndStride","buffers","attributes","tempStride","tempStart","j","buffer","getAttributeInfoFromFormat","GpuStencilModesToPixi","UboSystem","unsafeEvalSupported","uniformGroup","uniformData","Buffer","BufferUsage","uniformGroupSignature","elements","layout","syncFunction","uboElements","data","offset","uniformGroupData","synced","uniformParsers","createUboSyncFunction","parserCode","arrayGenerationFunction","singleSettersMap","funcFragments","prev","uboElement","name","parsed","template","fragmentSrc","loopMatrix","col","row","uboSyncFunctionsSTD40","uboSyncFunctionsWGSL","calculateProjection","pm","x","y","width","height","flipY","sign","canvasCache","getCanvasTexture","canvas","texture","CanvasSource","onDestroy","isRenderingToScreen","renderTarget","resource","_RenderTarget","descriptor","uid","TextureSource","colorSource","_size","resolution","skipColorTexture","colorTexture","RenderTarget","RenderTargetSystem","Rectangle","SystemRunner","target","clear","clearColor","frame","renderSurface","didChange","gpuRenderTarget","viewport","pixelWidth","pixelHeight","currentRenderTargetData","sourceRenderSurfaceTexture","destinationTexture","originSrc","size","originDest","key","BufferResource","EventEmitter","destroyBuffer","CustomRenderPipe","executeInstructions","instructions","RenderGroupPipe","collectRenderGroups","out","mixHexColors","color1","color2","ratio","r1","g1","b1","r2","g2","b2","r","g","b","WHITE_BGR","mixColors","localBGRColor","parentBGRColor","tempContainer","Container","updateRenderGroupTransforms","updateChildRenderGroups","updateRenderGroupTransform","childrenToUpdate","updateTick","renderGroupDepth","childrenAtDepth","list","index","child","updateTransformAndChildren","worldAlpha","renderGroupParent","updateFlags","localTransform","parent","updateColorBlendVisibility","UPDATE_COLOR","groupAlpha","UPDATE_BLEND","UPDATE_VISIBLE","validateRenderables","rebuildRequired","tempMatrix","RenderGroupSystem","transform","renderGroups","originalLocalTransform","updateRenderables","SpritePipe","_instructionSet","gpuSprite","batchableSprite","BatchableSprite","_BackgroundSystem","Color","BackgroundSystem","BLEND_MODE_FILTERS","extensions","BlendModePipe","renderable","blendMode","imageTypes","_ExtractSystem","defaults","image","format","quality","resolve","reject","blob","reader","pixelInfo","link","base64","style","ExtractSystem","RenderTexture","tempRect","noColor","GenerateTextureSystem","antialias","region","getLocalBounds","GlobalUniformSystem","projectionMatrix","worldTransformMatrix","worldColor","currentGlobalUniformData","Point","globalUniformData","uniforms","color32BitToUniform","bindGroup","BindGroup","RendererType","saidHello","VERSION","sayHello","type","DOMAdapter","args","HelloSystem","_TextureGCSystem","managedTextures","TextureGCSystem","_ViewSystem","deprecation","v8_0_0","desiredScreenWidth","desiredScreenHeight","ViewSystem","SharedSystems","RendererInitHook","SharedRenderPipes"],"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]}